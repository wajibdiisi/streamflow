<% layout('layout') -%>
<div class="grid grid-cols-2 md:hidden gap-3 mb-6">
  <div class="bg-gray-800 rounded-lg p-4 shadow-md">
    <div class="flex items-center justify-between mb-2">
      <h3 class="text-sm font-semibold">Active Streams</h3>
      <div class="w-7 h-7 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-broadcast text-white text-sm"></i>
      </div>
    </div>
    <p class="text-xl font-bold">0</p>
  </div>
  <div class="bg-gray-800 rounded-lg p-4 shadow-md">
    <div class="flex items-center justify-between mb-2">
      <h3 class="text-sm font-semibold">CPU Usage</h3>
      <div class="w-7 h-7 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-cpu text-white text-sm"></i>
      </div>
    </div>
    <p class="text-xl font-bold"><span id="cpu-usage-mobile">0</span>%</p>
    <div class="w-full bg-gray-700 rounded-full h-1.5 mt-1">
      <div id="cpu-bar-mobile" class="bg-primary h-1.5 rounded-full" style="width: 0%"></div>
    </div>
  </div>
  <div class="bg-gray-800 rounded-lg p-4 shadow-md">
    <div class="flex items-center justify-between mb-2">
      <h3 class="text-sm font-semibold">Memory</h3>
      <div class="w-7 h-7 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-device-sd-card text-white text-sm"></i>
      </div>
    </div>
    <p class="text-lg font-bold">
      <span id="memory-usage-mobile">0 MB</span><span id="memory-total-mobile" class="text-xs text-gray-400"> / 0 MB</span>
    </p>
    <div class="w-full bg-gray-700 rounded-full h-1.5 mt-1">
      <div id="memory-bar-mobile" class="bg-primary h-1.5 rounded-full" style="width: 0%"></div>
    </div>
  </div>
  <div class="bg-gray-800 rounded-lg p-4 shadow-md">
    <div class="flex items-center justify-between mb-2">
      <h3 class="text-sm font-semibold" id="network-disk-title-mobile">Internet Speed</h3>
      <div class="w-7 h-7 bg-dark-700 hover:bg-dark-600 rounded-lg flex items-center justify-center cursor-pointer transition-colors duration-200" onclick="toggleNetworkDiskDisplay('mobile')">
        <i class="ti ti-wifi text-white text-sm" id="toggle-icon-mobile"></i>
      </div>
    </div>
    <div id="network-content-mobile" class="space-y-1">
      <div class="flex justify-between items-center">
        <span class="text-xs text-gray-400">↑ U</span>
        <span id="upload-speed-mobile" class="text-sm font-bold text-blue-400">0 Mbps</span>
      </div>
      <div class="flex justify-between items-center">
        <span class="text-xs text-gray-400">↓ D</span>
        <span id="download-speed-mobile" class="text-sm font-bold text-green-400">0 Mbps</span>
      </div>
    </div>
    <div id="disk-content-mobile" style="display: none;">
      <p class="text-lg font-bold">
        <span id="disk-used-mobile">0 GB</span><span id="disk-total-mobile" class="text-xs text-gray-400"> / 0 GB</span>
      </p>
      <div class="w-full bg-gray-700 rounded-full h-1.5 mt-1">
        <div id="disk-bar-mobile" class="bg-primary h-1.5 rounded-full transition-colors duration-300" style="width: 0%"></div>
      </div>
    </div>
  </div>
</div>
<div class="hidden md:grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
  <div class="bg-gray-800 rounded-lg p-6 shadow-md">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-semibold">Active Streams</h3>
      <div class="w-10 h-10 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-broadcast text-xl text-white"></i>
      </div>
    </div>
    <p class="text-3xl font-bold mt-2">0</p>
  </div>
  <div class="bg-gray-800 rounded-lg p-6 shadow-md">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-semibold">CPU Usage</h3>
      <div class="w-10 h-10 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-cpu text-xl text-white"></i>
      </div>
    </div>
    <p class="text-3xl font-bold mt-2"><span id="cpu-usage">0</span>%</p>
    <div class="w-full bg-gray-700 rounded-full h-2.5 mt-2">
      <div id="cpu-bar" class="bg-primary h-2.5 rounded-full" style="width: 0%"></div>
    </div>
  </div>
  <div class="bg-gray-800 rounded-lg p-6 shadow-md">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-semibold">Memory</h3>
      <div class="w-10 h-10 bg-dark-700 rounded-lg flex items-center justify-center">
        <i class="ti ti-device-sd-card text-xl text-white"></i>
      </div>
    </div>
    <p class="text-3xl font-bold mt-2">
      <span id="memory-usage">0 MB</span><span id="memory-total" class="text-sm text-gray-400"> / 0 MB</span>
    </p>
    <div class="w-full bg-gray-700 rounded-full h-2.5 mt-2">
      <div id="memory-bar" class="bg-primary h-2.5 rounded-full" style="width: 0%"></div>
    </div>
  </div>
  <div class="bg-gray-800 rounded-lg p-6 shadow-md">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-semibold" id="network-disk-title">Internet Speed</h3>
      <div class="w-10 h-10 bg-dark-700 hover:bg-dark-600 rounded-lg flex items-center justify-center cursor-pointer transition-colors duration-200" onclick="toggleNetworkDiskDisplay('desktop')" title="Click to switch between Internet Speed and Disk Usage">
        <i class="ti ti-wifi text-xl text-white" id="toggle-icon-desktop"></i>
      </div>
    </div>
    <div id="network-content-desktop" class="mt-2 space-y-2">
      <div class="flex justify-between items-center">
        <span class="text-sm text-gray-400">↑ Upload</span>
        <span id="upload-speed" class="text-lg font-bold text-blue-400">0 Mbps</span>
      </div>
      <div class="flex justify-between items-center">
        <span class="text-sm text-gray-400">↓ Download</span>
        <span id="download-speed" class="text-lg font-bold text-green-400">0 Mbps</span>
      </div>
    </div>
    <div id="disk-content-desktop" class="mt-2" style="display: none;">
      <p class="text-3xl font-bold">
        <span id="disk-used">0 GB</span><span id="disk-total" class="text-sm text-gray-400"> / 0 GB</span>
      </p>
      <div class="w-full bg-gray-700 rounded-full h-2.5 mt-2">
        <div id="disk-bar" class="bg-primary h-2.5 rounded-full transition-colors duration-300" style="width: 0%"></div>
      </div>
    </div>
  </div>
</div>
<div class="mt-8">
  <div class="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between mb-6">
    <h2 class="text-xl font-bold">Streaming Status</h2>
    <div class="flex flex-col sm:flex-row items-center gap-3 w-full sm:w-auto">
      <div class="relative w-full sm:w-64">
        <input type="text" placeholder="Search streams..."
          class="w-full bg-dark-700 border border-gray-600 text-white pl-9 pr-4 py-2 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
        <i class="ti ti-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
      </div>
      <button id="deleteOfflineBtn"
        class="w-full sm:w-auto flex items-center justify-center gap-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
        title="Delete all offline streams">
        <i class="ti ti-trash"></i>
        <span>Delete Offline</span>
      </button>
      <button onclick="openNewStreamModal()"
        class="w-full sm:w-auto flex items-center justify-center gap-2 bg-primary hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors">
        <i class="ti ti-plus"></i>
        <span>New Stream</span>
      </button>
    </div>
  </div>
  <div class="block md:hidden space-y-4">
  </div>
  <div class="hidden md:block bg-gray-800 rounded-lg shadow-md overflow-hidden">
    <div class="overflow-x-auto">
      <table class="min-w-full">
        <thead class="bg-gray-700 sticky top-0 z-10">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-600" onclick="sortStreams('title')">
              Stream Name <i class="ti ti-arrow-up-down text-xs ml-1"></i>
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-600" onclick="sortStreams('channel')">
              Channel <i class="ti ti-arrow-up-down text-xs ml-1"></i>
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-600" onclick="sortStreams('folder')">
              Folder <i class="ti ti-arrow-up-down text-xs ml-1"></i>
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-600" onclick="sortStreams('duration')">
              Duration <i class="ti ti-arrow-up-down text-xs ml-1"></i>
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-600" onclick="sortStreams('schedule')">
              Start Date <i class="ti ti-arrow-up-down text-xs ml-1"></i>
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-600" onclick="sortStreams('exp_stop_date')">
              Exp Stop Date <i class="ti ti-arrow-up-down text-xs ml-1"></i>
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider cursor-pointer hover:bg-gray-600" onclick="sortStreams('real_stop_date')">
              Real SD <i class="ti ti-arrow-up-down text-xs ml-1"></i>
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-700">
          <tr id="empty-state" class="hover:bg-dark-700/50 transition-colors" style="display: none;">
            <td colspan="9" class="px-6 py-10 text-center">
              <div class="flex flex-col items-center">
                <div class="w-16 h-16 rounded-full bg-dark-700 flex items-center justify-center mb-4">
                  <i class="ti ti-broadcast text-gray-500 text-2xl"></i>
                </div>
                <p class="text-gray-400 font-medium mb-2">No streams found</p>
                <p class="text-gray-500 max-w-sm mb-4">Create your first stream to start broadcasting to your audience
                </p>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>
<div id="newStreamModal" class="fixed inset-0 bg-black/50 z-50 hidden modal-overlay overflow-y-auto">
  <div class="flex min-h-screen items-center justify-center p-4">
    <div class="bg-dark-800 rounded-lg shadow-xl w-full max-w-4xl modal-container flex flex-col max-h-[90vh]">
      <div class="flex-shrink-0 flex items-center justify-between p-4 sm:px-6 sm:py-6 border-b border-gray-700">
        <h3 class="text-lg font-semibold">Create New Stream</h3>
        <button onclick="closeNewStreamModal()" class="text-gray-400 hover:text-white">
          <i class="ti ti-x text-xl"></i>
        </button>
      </div>
      <div class="p-4 sm:px-6 pt-1 pb-4 overflow-y-auto flex-grow">
        <form id="newStreamForm" class="space-y-6">
          <input type="hidden" id="selectedVideoId" name="videoId" value="">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div class="space-y-4">
              <div class="relative">
                <label class="text-sm font-medium text-white block mb-2">Select Video</label>
                <div class="relative">
                  <button type="button" onclick="toggleVideoSelector()"
                    class="w-full flex items-center justify-between px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg hover:border-primary focus:border-primary focus:ring-1 focus:ring-primary transition-colors text-left">
                    <span class="text-sm text-gray-300" id="selectedVideo">Choose a video...</span>
                    <i class="ti ti-chevron-down text-gray-400"></i>
                  </button>
                  <div id="videoSelectorDropdown"
                    class="hidden absolute z-50 mt-2 w-full bg-gray-800 rounded-lg border border-gray-600 shadow-lg">
                    <div class="p-2 border-b border-gray-600/50">
                      <div class="relative">
                        <input type="text" id="videoSearchInput"
                          class="w-full bg-gradient-to-r from-gray-800/50 to-gray-700/50 text-white pl-10 pr-4 py-3 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 border border-gray-600 hover:border-gray-500 transition-all duration-200 placeholder-gray-400"
                          placeholder="Search videos...">
                        <i class="ti ti-search absolute left-3 top-1/2 -translate-y-1/2 text-blue-400"></i>
                      </div>
                      <div class="mt-3 space-y-3">
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                          <div class="space-y-1">
                            <label for="videoFilterSelect" class="text-xs font-medium text-gray-300 flex items-center">
                              <i class="ti ti-filter mr-1 text-gray-400"></i>Filter
                            </label>
                            <select id="videoFilterSelect" class="w-full bg-blue-600 hover:bg-blue-500 text-white text-xs rounded-lg px-3 py-2 transition-all duration-200 font-medium">
                              <option value="all" class="bg-blue-600">All videos</option>
                              <option value="used_gt_0" class="bg-blue-600">Used in streams (total)</option>
                              <option value="used_eq_0" class="bg-blue-600">Never used</option>
                              <option value="in_use" class="bg-blue-600">Currently in use</option>
                            </select>
                          </div>
                          <div class="space-y-1">
                            <label for="videoSortSelect" class="text-xs font-medium text-gray-300 flex items-center">
                              <i class="ti ti-sort-ascending mr-1 text-gray-400"></i>Sort
                            </label>
                            <select id="videoSortSelect" class="w-full bg-green-600 hover:bg-green-500 text-white text-xs rounded-lg px-3 py-2 transition-all duration-200 font-medium">
                              <option value="default" class="bg-green-600">Default</option>
                              <option value="used_desc" class="bg-green-600">Total used (High → Low)</option>
                              <option value="used_asc" class="bg-green-600">Total used (Low → High)</option>
                            </select>
                          </div>
                        </div>
                        <div class="space-y-1">
                          <label for="videoFolderSelect" class="text-xs font-medium text-gray-300 flex items-center">
                            <i class="ti ti-folder mr-1 text-gray-400"></i>Folder
                          </label>
                          <div class="flex items-center space-x-2">
                            <select id="videoFolderSelect" class="flex-1 bg-purple-600 hover:bg-purple-500 text-white text-xs rounded-lg px-3 py-2 transition-all duration-200 font-medium">
                              <option value="all" class="bg-purple-600">All folders</option>
                            </select>
                            <button type="button" id="clearFolderFilter" class="hidden bg-red-600 hover:bg-red-500 text-white px-3 py-2 rounded-lg text-xs font-medium transition-all duration-200" title="Clear folder filter">
                              <i class="ti ti-x"></i>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div id="videoListContainer" class="p-2 space-y-1 max-h-60 overflow-y-auto">
                    </div>
                  </div>
                </div>
              </div>
              <div class="lg:hidden bg-dark-900 rounded-lg overflow-hidden">
                <div class="aspect-video bg-dark-900">
                  <div id="videoPreviewMobile" class="hidden w-full h-full">
                    <video id="videojs-preview-mobile" class="video-js vjs-default-skin vjs-big-play-centered"
                      controls preload="auto" width="100%" height="100%"
                      data-setup='{"fluid": true, "playbackRates": [0.5, 1, 1.25, 1.5, 2]}'>
                      <source src="" type="video/mp4">
                      <p class="vjs-no-js">Please enable JavaScript to view videos</p>
                    </video>
                  </div>
                  <div id="emptyPreviewMobile" class="h-full flex flex-col items-center justify-center">
                    <i class="ti ti-video text-4xl text-gray-600 mb-2"></i>
                    <p class="text-sm text-gray-500">Select a video to preview</p>
                  </div>
                </div>
              </div>
              <div>
                <label class="text-sm font-medium text-white block mb-2">Stream Title</label>
                <input type="text"
                  class="w-full px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                  placeholder="Enter stream title..." name="streamTitle" id="streamTitle" required>
              </div>
              <div class="space-y-4">
                <label class="text-sm font-medium text-white block">Stream Configuration</label>
                <div class="space-y-3">
                  <div class="relative">
                    <input type="text" id="rtmpUrl" name="rtmpUrl"
                      class="w-full pl-10 pr-12 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                      placeholder="RTMP URL" required>
                    <i class="ti ti-link absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
                    <button type="button" id="platformSelector"
                      class="absolute right-2 top-1/2 -translate-y-1/2 w-8 h-8 flex items-center justify-center rounded-full hover:bg-dark-600 transition-colors"
                      aria-label="Select platform">
                      <i class="ti ti-list-check text-gray-400 hover:text-primary"></i>
                    </button>
                    <div id="platformDropdown"
                      class="hidden absolute z-10 right-0 mt-1 w-48 bg-dark-700 rounded-lg border border-gray-600 shadow-lg overflow-hidden">
                      <div class="py-1">
                        <button type="button"
                          class="platform-option w-full flex items-center px-4 py-2 hover:bg-dark-600"
                          data-url="rtmp://a.rtmp.youtube.com/live2">
                          <i class="ti ti-brand-youtube text-red-500 text-base mr-2"></i>
                          <span class="text-sm">YouTube</span>
                        </button>
                        <button type="button"
                          class="platform-option w-full flex items-center px-4 py-2 hover:bg-dark-600"
                          data-url="rtmps://live-api-s.facebook.com:443/rtmp">
                          <i class="ti ti-brand-facebook text-blue-500 text-base mr-2"></i>
                          <span class="text-sm">Facebook</span>
                        </button>
                        <button type="button"
                          class="platform-option w-full flex items-center px-4 py-2 hover:bg-dark-600"
                          data-url="rtmps://ingest.global.live.prod.tiktok.com/live">
                          <i class="ti ti-brand-tiktok text-black text-base mr-2"></i>
                          <span class="text-sm">TikTok</span>
                        </button>
                        <button type="button"
                          class="platform-option w-full flex items-center px-4 py-2 hover:bg-dark-600"
                          data-url="rtmp://live.shopee.co.id/live">
                          <i class="ti ti-brand-shopee text-orange-500 text-base mr-2"></i>
                          <span class="text-sm">Shopee Live</span>
                        </button>
                        <button type="button"
                          class="platform-option w-full flex items-center px-4 py-2 hover:bg-dark-600"
                          data-url="rtmp://live.twitch.tv/live">
                          <i class="ti ti-brand-twitch text-purple-500 text-base mr-2"></i>
                          <span class="text-sm">Twitch</span>
                        </button>
                      </div>
                    </div>
                  </div>
                  <div class="mb-3">
                    <label class="block text-sm font-medium text-gray-300 mb-2">Stream Key Source</label>
                    <div class="flex gap-2">
                      <select id="streamKeySource" class="flex-1 bg-dark-700 text-white px-3 py-2.5 rounded-lg border border-gray-600 focus:outline-none focus:ring-1 focus:ring-primary">
                        <option value="manual">Enter manually</option>
                        <option value="saved">Use saved key</option>
                      </select>
                      <button type="button" id="manageStreamKeysBtn" class="px-3 py-2.5 bg-dark-600 hover:bg-dark-500 text-white rounded-lg border border-gray-600 transition-colors" title="Manage Stream Keys">
                        <i class="ti ti-settings"></i>
                      </button>
                    </div>
                  </div>
                  <div id="manualStreamKeySection">
                    <div class="relative">
                      <input type="password" id="streamKey" name="streamKey"
                        class="w-full pl-10 pr-12 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                        placeholder="Stream Key" required>
                      <i class="ti ti-key absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
                      <button type="button" onclick="toggleStreamKeyVisibility()"
                        class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white transition-colors">
                        <i class="ti ti-eye" id="streamKeyToggle"></i>
                      </button>
                    </div>
                    <div class="mt-3 flex items-center gap-3">
                      <input type="checkbox" id="saveManualKeyCheckbox" class="sr-only">
                      <label for="saveManualKeyCheckbox" class="flex items-center cursor-pointer">
                        <div class="relative">
                          <div class="w-5 h-5 bg-dark-700 border-2 border-gray-600 rounded-md transition-all duration-200 hover:border-primary/50 checkbox-custom">
                            <div class="absolute inset-0 flex items-center justify-center opacity-0 transition-opacity duration-200 checkbox-check">
                              <i class="ti ti-check text-xs text-white"></i>
                            </div>
                          </div>
                        </div>
                        <span class="ml-3 text-sm text-gray-300 hover:text-white transition-colors">Save this key to a group</span>
                      </label>
                    </div>
                    <div id="manualKeyGroupWrap" class="mt-2 hidden">
                      <select id="manualKeyGroupSelect" class="w-full bg-dark-700 text-white px-3 py-2.5 rounded-lg border border-gray-600 focus:outline-none focus:ring-1 focus:ring-primary">
                        <option value="">Select a group...</option>
                      </select>
                    </div>
                  </div>
                  <div id="savedStreamKeySection" class="hidden">
                    <div class="flex gap-2">
                      <select id="savedStreamKeyGroup" class="w-full bg-dark-700 text-white px-3 py-2.5 rounded-lg border border-gray-600 focus:outline-none focus:ring-1 focus:ring-primary">
                        <option value="">Select a group...</option>
                      </select>
                      <button type="button" id="browseKeysBtn" class="px-3 py-2.5 bg-dark-600 hover:bg-dark-500 text-white rounded-lg border border-gray-600 transition-colors" title="Browse keys in group">
                        <i class="ti ti-dots"></i>
                      </button>
                      <input type="hidden" id="savedStreamKeyChosen">
                    </div>
                    <div id="selectedStreamKeyDisplay" class="mt-2 text-sm text-gray-400 hidden">
                      <span class="text-gray-500">Selected:</span> <span id="selectedStreamKeyText" class="text-white font-mono bg-dark-800 px-2 py-1 rounded"></span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="hidden lg:block">
              <div class="overflow-hidden h-full">
                <div class="aspect-video rounded-lg bg-dark-900">
                  <div id="videoPreview" class="hidden w-full h-full">
                    <video id="videojs-preview-desktop"
                      class="video-js vjs-default-skin vjs-big-play-centered rounded-lg" controls preload="auto"
                      width="100%" height="100%"
                      data-setup='{"fluid": true, "playbackRates": [0.5, 1, 1.25, 1.5, 2]}'>
                      <source src="" type="video/mp4">
                      <p class="vjs-no-js">Please enable JavaScript to view videos</p>
                    </video>
                  </div>
                  <div id="emptyPreview" class="h-full flex flex-col items-center justify-center">
                    <i class="ti ti-video text-4xl text-gray-600 mb-2"></i>
                    <p class="text-sm text-gray-500">Select a video to preview</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="space-y-2">
            <div class="flex flex-col sm:flex-row sm:items-center">
              <label class="text-sm font-medium text-white">Start Date Settings</label>
              <span id="serverTimeDisplay"
                class="mt-1 sm:mt-0 sm:ml-2 block sm:inline-block bg-gray-700 text-xs text-gray-300 px-2 py-0.5 rounded">
                Server time: loading...
              </span>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
              <div class="h-[42px] flex items-center justify-between">
                <label class="text-sm text-gray-300">Loop Video</label>
                <label class="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" name="loopVideo" class="sr-only peer" checked>
                  <div class="w-11 h-6 bg-dark-700 rounded-full peer peer-checked:bg-primary"></div>
                  <div
                    class="absolute left-[2px] top-[2px] w-5 h-5 bg-white rounded-full transition-all peer-checked:translate-x-5">
                  </div>
                </label>
              </div>
              <div>
                <input type="datetime-local"
                  class="w-full h-[42px] px-4 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary text-sm [color-scheme:dark]">
              </div>
              <div class="relative">
                <input type="number" min="1"
                  class="w-full h-[42px] px-4 pr-16 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary text-sm"
                  placeholder="Duration">
                <span class="absolute right-4 top-1/2 -translate-y-1/2 text-sm text-gray-400">minutes</span>
              </div>
            </div>
          </div>
          <!-- Start Now Checkbox -->
          <div class="space-y-4">
            <div class="pt-2 border-t border-gray-700">
              <div class="flex items-center">
                <input type="checkbox" id="startNowCheckbox" class="sr-only">
                <label for="startNowCheckbox" class="flex items-center cursor-pointer">
                  <div class="relative">
                    <div class="w-10 h-6 bg-gray-600 rounded-full shadow-inner"></div>
                    <div class="absolute left-1 top-1 w-4 h-4 bg-white rounded-full shadow transform transition-transform"></div>
                  </div>
                  <span class="ml-3 text-sm text-gray-300">Start Now (ignore schedule time)</span>
                </label>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="flex-shrink-0 flex items-center justify-end gap-3 p-4 sm:px-6 sm:py-6 border-t border-gray-700">
        <button onclick="closeNewStreamModal()"
          class="px-5 py-2.5 text-sm font-medium text-gray-300 hover:text-white transition-colors">
          Cancel
        </button>
        <button type="submit" form="newStreamForm"
          class="px-5 py-2.5 text-sm font-medium bg-primary hover:bg-blue-600 text-white rounded-lg transition-colors">
          Create Stream
        </button>
      </div>
    </div>
  </div>
</div>
<div id="editStreamModal" class="fixed inset-0 bg-black/50 z-50 hidden modal-overlay overflow-y-auto">
  <div class="flex min-h-screen items-center justify-center p-4">
    <div class="bg-dark-800 rounded-lg shadow-xl w-full max-w-4xl modal-container flex flex-col max-h-[90vh]">
      <div class="flex-shrink-0 flex items-center justify-between p-4 sm:px-6 sm:py-6 border-b border-gray-700">
        <h3 class="text-lg font-semibold">Edit Stream</h3>
        <button onclick="closeEditStreamModal()" class="text-gray-400 hover:text-white">
          <i class="ti ti-x text-xl"></i>
        </button>
      </div>
      <div class="p-4 sm:px-6 pt-1 pb-4 overflow-y-auto flex-grow">
        <form id="editStreamForm" class="space-y-6">
          <input type="hidden" id="editStreamId" name="streamId" value="">
          <input type="hidden" id="editSelectedVideoId" name="videoId" value="">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div class="space-y-4">
              <div class="relative">
                <label class="text-sm font-medium text-white block mb-2">Select Video</label>
                <div class="relative">
                  <button type="button" onclick="toggleEditVideoSelector()"
                    class="w-full flex items-center justify-between px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg hover:border-primary focus:border-primary focus:ring-1 focus:ring-primary transition-colors text-left">
                    <span class="text-sm text-gray-300" id="editSelectedVideo">Choose a video...</span>
                    <i class="ti ti-chevron-down text-gray-400"></i>
                  </button>
                  <div id="editVideoSelectorDropdown"
                    class="hidden absolute z-10 mt-2 w-full bg-dark-700 rounded-lg border border-gray-600 shadow-lg">
                    <div class="p-2 border-b border-gray-600/50">
                      <div class="relative">
                        <input type="text" id="editVideoSearchInput"
                          class="w-full bg-dark-800 text-white pl-8 pr-4 py-2 rounded-lg text-sm focus:outline-none focus:ring-1 focus:ring-primary border border-gray-700"
                          placeholder="Search videos...">
                        <i class="ti ti-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
                      </div>
                    </div>
                    <div id="editVideoListContainer" class="p-2 space-y-1 max-h-60 overflow-y-auto">
                    </div>
                  </div>
                </div>
              </div>
              <div class="lg:hidden bg-dark-900 rounded-lg overflow-hidden">
                <div class="aspect-video bg-dark-900">
                  <div id="editVideoPreviewMobile" class="hidden w-full h-full">
                    <video id="edit-videojs-preview-mobile" class="video-js vjs-default-skin vjs-big-play-centered"
                      controls preload="auto" width="100%" height="100%"
                      data-setup='{"fluid": true, "playbackRates": [0.5, 1, 1.25, 1.5, 2]}'>
                      <source src="" type="video/mp4">
                      <p class="vjs-no-js">Please enable JavaScript to view videos</p>
                    </video>
                  </div>
                  <div id="editEmptyPreviewMobile" class="h-full flex flex-col items-center justify-center">
                    <i class="ti ti-video text-4xl text-gray-600 mb-2"></i>
                    <p class="text-sm text-gray-500">Select a video to preview</p>
                  </div>
                </div>
              </div>
              <div>
                <label class="text-sm font-medium text-white block mb-2">Stream Title</label>
                <input type="text"
                  class="w-full px-4 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                  placeholder="Enter stream title..." name="streamTitle" id="editStreamTitle" required>
              </div>
              <div class="space-y-4">
                <label class="text-sm font-medium text-white block mb-3">Stream Configuration</label>
                <div class="space-y-3">
                  <div class="relative">
                    <input type="text" id="editRtmpUrl" name="rtmpUrl"
                      class="w-full pl-10 pr-12 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                      placeholder="RTMP URL" required>
                    <i class="ti ti-link absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
                    <button type="button" id="editPlatformSelector"
                      class="absolute right-2 top-1/2 -translate-y-1/2 w-8 h-8 flex items-center justify-center rounded-full hover:bg-dark-600 transition-colors"
                      aria-label="Select platform">
                      <i class="ti ti-list-check text-gray-400 hover:text-primary"></i>
                    </button>
                    <div id="editPlatformDropdown"
                      class="hidden absolute z-10 right-0 mt-1 w-48 bg-dark-700 rounded-lg border border-gray-600 shadow-lg overflow-hidden">
                      <div class="py-1">
                        <button type="button"
                          class="platform-option w-full flex items-center px-4 py-2 hover:bg-dark-600"
                          data-url="rtmp://a.rtmp.youtube.com/live2">
                          <i class="ti ti-brand-youtube text-red-500 text-base mr-2"></i>
                          <span class="text-sm">YouTube</span>
                        </button>
                        <button type="button"
                          class="platform-option w-full flex items-center px-4 py-2 hover:bg-dark-600"
                          data-url="rtmps://live-api-s.facebook.com:443/rtmp">
                          <i class="ti ti-brand-facebook text-blue-500 text-base mr-2"></i>
                          <span class="text-sm">Facebook</span>
                        </button>
                        <button type="button"
                          class="platform-option w-full flex items-center px-4 py-2 hover:bg-dark-600"
                          data-url="rtmps://ingest.global.live.prod.tiktok.com/live">
                          <i class="ti ti-brand-tiktok text-black text-base mr-2"></i>
                          <span class="text-sm">TikTok</span>
                        </button>
                        <button type="button"
                          class="platform-option w-full flex items-center px-4 py-2 hover:bg-dark-600"
                          data-url="rtmp://live.shopee.co.id/live">
                          <i class="ti ti-brand-shopee text-orange-500 text-base mr-2"></i>
                          <span class="text-sm">Shopee Live</span>
                        </button>
                        <button type="button"
                          class="platform-option w-full flex items-center px-4 py-2 hover:bg-dark-600"
                          data-url="rtmp://live.twitch.tv/live">
                          <i class="ti ti-brand-twitch text-purple-500 text-base mr-2"></i>
                          <span class="text-sm">Twitch</span>
                        </button>
                      </div>
                    </div>
                  </div>
                  <div class="mb-3">
                    <label class="block text-sm font-medium text-gray-300 mb-2">Stream Key Source</label>
                    <div class="flex gap-2">
                      <select id="editStreamKeySource" class="flex-1 bg-dark-700 text-white px-3 py-2.5 rounded-lg border border-gray-600 focus:outline-none focus:ring-1 focus:ring-primary">
                        <option value="manual">Enter manually</option>
                        <option value="saved">Use saved key</option>
                      </select>
                      <button type="button" id="editManageStreamKeysBtn" class="px-3 py-2.5 bg-dark-600 hover:bg-dark-500 text-white rounded-lg border border-gray-600 transition-colors" title="Manage Stream Keys">
                        <i class="ti ti-settings"></i>
                      </button>
                    </div>
                  </div>
                  <div id="editManualStreamKeySection">
                    <div class="relative">
                      <input type="password" id="editStreamKey" name="streamKey"
                        class="w-full pl-10 pr-12 py-2.5 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary"
                        placeholder="Stream Key" required>
                      <i class="ti ti-key absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
                      <button type="button" onclick="toggleEditStreamKeyVisibility()"
                        class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white transition-colors">
                        <i class="ti ti-eye" id="editStreamKeyToggle"></i>
                      </button>
                    </div>
                    <div class="mt-3 flex items-center gap-3">
                      <input type="checkbox" id="editSaveManualKeyCheckbox" class="sr-only">
                      <label for="editSaveManualKeyCheckbox" class="flex items-center cursor-pointer">
                        <div class="relative">
                          <div class="w-5 h-5 bg-dark-700 border-2 border-gray-600 rounded-md transition-all duration-200 hover:border-primary/50 checkbox-custom">
                            <div class="absolute inset-0 flex items-center justify-center opacity-0 transition-opacity duration-200 checkbox-check">
                              <i class="ti ti-check text-xs text-white"></i>
                            </div>
                          </div>
                        </div>
                        <span class="ml-3 text-sm text-gray-300 hover:text-white transition-colors">Save this key to a group</span>
                      </label>
                    </div>
                    <div id="editManualKeyGroupWrap" class="mt-2 hidden">
                      <select id="editManualKeyGroupSelect" class="w-full bg-dark-700 text-white px-3 py-2.5 rounded-lg border border-gray-600 focus:outline-none focus:ring-1 focus:ring-primary">
                        <option value="">Select a group...</option>
                      </select>
                    </div>
                  </div>
                  <div id="editSavedStreamKeySection" class="hidden">
                    <div class="flex gap-2">
                      <select id="editSavedStreamKeyGroup" class="w-full bg-dark-700 text-white px-3 py-2.5 rounded-lg border border-gray-600 focus:outline-none focus:ring-1 focus:ring-primary">
                        <option value="">Select a group...</option>
                      </select>
                      <button type="button" id="editBrowseKeysBtn" class="px-3 py-2.5 bg-dark-600 hover:bg-dark-500 text-white rounded-lg border border-gray-600 transition-colors" title="Browse keys in group">
                        <i class="ti ti-dots"></i>
                      </button>
                      <input type="hidden" id="editSavedStreamKeyChosen">
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="hidden lg:block">
              <div class="overflow-hidden h-full">
                <div class="aspect-video rounded-lg bg-dark-900">
                  <div id="editVideoPreview" class="hidden w-full h-full">
                    <video id="edit-videojs-preview-desktop"
                      class="video-js vjs-default-skin vjs-big-play-centered rounded-lg" controls preload="auto"
                      width="100%" height="100%"
                      data-setup='{"fluid": true, "playbackRates": [0.5, 1, 1.25, 1.5, 2]}'>
                      <source src="" type="video/mp4">
                      <p class="vjs-no-js">Please enable JavaScript to view videos</p>
                    </video>
                  </div>
                  <div id="editEmptyPreview" class="h-full flex flex-col items-center justify-center">
                    <i class="ti ti-video text-4xl text-gray-600 mb-2"></i>
                    <p class="text-sm text-gray-500">Select a video to preview</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="space-y-2">
            <div class="flex flex-col sm:flex-row sm:items-center">
              <label class="text-sm font-medium text-white">Start Date Settings</label>
              <span id="editServerTimeDisplay"
                class="mt-1 sm:mt-0 sm:ml-2 block sm:inline-block bg-gray-700 text-xs text-gray-300 px-2 py-0.5 rounded">
                Server time: loading...
              </span>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
              <div class="h-[42px] flex items-center justify-between">
                <label class="text-sm text-gray-300">Loop Video</label>
                <label class="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" name="loopVideo" id="editLoopVideo" class="sr-only peer" checked>
                  <div class="w-11 h-6 bg-dark-700 rounded-full peer peer-checked:bg-primary"></div>
                  <div
                    class="absolute left-[2px] top-[2px] w-5 h-5 bg-white rounded-full transition-all peer-checked:translate-x-5">
                  </div>
                </label>
              </div>
              <div>
                <input type="datetime-local" id="editScheduleTime"
                  class="w-full h-[42px] px-4 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary text-sm [color-scheme:dark]">
              </div>
              <div class="relative">
                <input type="number" id="editDuration" min="1"
                  class="w-full h-[42px] px-4 pr-16 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary text-sm"
                  placeholder="Duration">
                <span class="absolute right-4 top-1/2 -translate-y-1/2 text-sm text-gray-400">minutes</span>
              </div>
            </div>
          </div>
          <div class="space-y-4">
            <div class="pt-2 border-t border-gray-700">
              <button type="button" id="editAdvancedSettingsToggle"
                class="flex items-center justify-between w-full text-left">
                <div class="flex items-center">
                  <span class="text-sm font-medium text-white">Advanced Settings</span>
                  <div class="relative ml-2 group">
                    <i class="ti ti-info-circle text-gray-400 hover:text-primary"></i>
                    <div
                      class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 hidden group-hover:block w-64 p-2 bg-dark-600 text-xs text-gray-200 rounded-md shadow-lg z-10">
                      <div class="text-center">Menggunakan advanced settings, proses streaming akan menjadi lebih
                        berat karena ada proses re-encoding video</div>
                      <div
                        class="absolute top-full left-1/2 -translate-x-1/2 border-4 border-transparent border-t-dark-600">
                      </div>
                    </div>
                  </div>
                </div>
                <i class="ti ti-chevron-down text-gray-400 transition-transform"></i>
              </button>
              <div id="editAdvancedSettingsContent" class="hidden space-y-6 pt-4">
                <div class="space-y-4">
                  <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <label class="text-xs text-gray-400 block mb-1">Bitrate</label>
                      <select name="bitrate" id="editBitrate"
                        class="w-full h-[42px] px-4 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary text-sm">
                        <option value="2500">2500 kbps</option>
                        <option value="4000">4000 kbps</option>
                        <option value="6000">6000 kbps</option>
                        <option value="8000">8000 kbps</option>
                        <option value="10000">10000 kbps</option>
                        <option value="12000">12000 kbps</option>
                        <option value="15000">15000 kbps</option>
                        <option value="20000">20000 kbps</option>
                      </select>
                    </div>
                    <div>
                      <label class="text-xs text-gray-400 block mb-1">Frame Rate</label>
                      <select name="fps" id="editFps"
                        class="w-full h-[42px] px-4 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary text-sm">
                        <option value="30">30 FPS</option>
                        <option value="60">60 FPS</option>
                        <option value="120">120 FPS</option>
                      </select>
                    </div>
                    <div>
                      <label class="text-xs text-gray-400 block mb-1">Resolution</label>
                      <select id="editResolutionSelect"
                        class="w-full h-[42px] px-4 bg-dark-700 border border-gray-600 rounded-lg focus:border-primary focus:ring-1 focus:ring-primary text-sm">
                        <option value="720" selected data-horizontal="1280x720" data-vertical="720x1280">720p HD
                        </option>
                        <option value="1080" data-horizontal="1920x1080" data-vertical="1080x1920">1080p Full HD
                        </option>
                        <option value="1440" data-horizontal="2560x1440" data-vertical="1440x2560">1440p QHD</option>
                        <option value="2160" data-horizontal="3840x2160" data-vertical="2160x3840">2160p 4K</option>
                      </select>
                      <div class="text-xs text-gray-500 mt-1">
                        <span id="editCurrentResolution">1280x720</span>
                      </div>
                    </div>
                    <div>
                      <label class="text-xs text-gray-400 block mb-1">Orientation</label>
                      <div class="flex gap-2 h-[42px]">
                        <button type="button" onclick="setEditVideoOrientation('horizontal')"
                          class="flex-1 flex items-center justify-center bg-dark-700 hover:bg-dark-600 border border-gray-600 rounded-lg transition-colors active-orientation">
                          <i class="ti ti-rectangle text-sm mr-1"></i>
                          <span class="text-xs">Landscape</span>
                        </button>
                        <button type="button" onclick="setEditVideoOrientation('vertical')"
                          class="flex-1 flex items-center justify-center bg-dark-700 hover:bg-dark-600 border border-gray-600 rounded-lg transition-colors">
                          <i class="ti ti-rectangle-vertical text-sm mr-1"></i>
                          <span class="text-xs">Portrait</span>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="flex-shrink-0 flex items-center justify-end gap-3 p-4 sm:px-6 sm:py-6 border-t border-gray-700">
        <button onclick="closeEditStreamModal()"
          class="px-5 py-2.5 text-sm font-medium text-gray-300 hover:text-white transition-colors">
          Cancel
        </button>
        <button type="submit" form="editStreamForm"
          class="px-5 py-2.5 text-sm font-medium bg-primary hover:bg-blue-600 text-white rounded-lg transition-colors">
          Save Changes
        </button>
      </div>
    </div>
  </div>
</div>
<style>
  .video-js {
    background-color: #1f2937;
    width: 100%;
    height: 100%;
  }
  .video-js .vjs-big-play-button {
    background-color: rgba(59, 130, 246, 0.7);
    border-color: rgba(59, 130, 246, 0.7);
    border-radius: 50%;
    width: 60px;
    height: 60px;
    line-height: 60px;
    left: 50%;
    top: 50%;
    margin-left: -30px;
    margin-top: -30px;
  }
  .video-js:hover .vjs-big-play-button {
    background-color: rgb(59, 130, 246);
  }
  .video-js .vjs-control-bar {
    background-color: rgba(31, 41, 55, 0.7);
  }
  .video-js .vjs-slider {
    background-color: rgba(255, 255, 255, 0.2);
  }
  .video-js .vjs-play-progress,
  .video-js .vjs-volume-level {
    background-color: rgb(59, 130, 246);
  }
  .video-js .vjs-load-progress {
    background: rgba(255, 255, 255, 0.3);
  }
  .aspect-video .video-js {
    aspect-ratio: 16/9;
    height: auto !important;
  }
  .video-js .vjs-control-bar {
    display: flex !important;
    visibility: visible !important;
    opacity: 1 !important;
    transition: visibility 0.1s, opacity 0.1s !important;
  }
  .video-js.vjs-user-inactive:not(.vjs-paused) .vjs-control-bar {
    visibility: visible !important;
    opacity: 0.7 !important;
  }
  .video-js .vjs-progress-control {
    min-width: 4em !important;
    flex: 1 !important;
  }
  .video-js .vjs-progress-control .vjs-progress-holder {
    margin: 0 10px !important;
    height: 0.3em !important;
  }
  .video-js .vjs-progress-control:hover .vjs-progress-holder {
    height: 0.5em !important;
  }
  .vjs-icon-placeholder:before {
    position: absolute !important;
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%) !important;
  }
  #videoListContainer {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.3) transparent;
  }
  #videoListContainer::-webkit-scrollbar {
    width: 6px;
  }
  #videoListContainer::-webkit-scrollbar-track {
    background: transparent;
  }
  #videoListContainer::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.3);
    border-radius: 20px;
  }
  #videoSearchInput::placeholder {
    color: rgba(156, 163, 175, 0.7);
  }
  .highlight {
    background-color: rgba(59, 130, 246, 0.2);
    padding: 0 2px;
    border-radius: 2px;
  }
  #platformDropdown {
    transform-origin: top right;
    transition: transform 0.2s, opacity 0.2s;
    transform: scale(0.95);
    opacity: 0;
  }
  #platformDropdown:not(.hidden) {
    transform: scale(1);
    opacity: 1;
  }
  .platform-option:hover i {
    transform: scale(1.1);
  }
  .platform-option i {
    transition: transform 0.2s;
  }
  #platformSelector {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  #platformSelector i {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    font-size: 1.25rem;
    line-height: 1;
  }
  #platformDropdown {
    transform-origin: top right;
    transition: transform 0.2s, opacity 0.2s;
    transform: scale(0.95);
    opacity: 0;
  }
  #platformDropdown:not(.hidden) {
    transform: scale(1);
    opacity: 1;
  }
  * {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.3) transparent;
  }
  ::-webkit-scrollbar {
    width: 5px;
    height: 5px;
  }
  ::-webkit-scrollbar-track {
    background: transparent;
  }
  ::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.3);
    border-radius: 20px;
  }
  ::-webkit-scrollbar-thumb:hover {
    background-color: rgba(156, 163, 175, 0.5);
  }
  .modal-overlay,
  .overflow-y-auto,
  .overflow-x-auto {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.3) transparent;
  }
  .modal-overlay::-webkit-scrollbar,
  .overflow-y-auto::-webkit-scrollbar,
  .overflow-x-auto::-webkit-scrollbar {
    width: 5px;
    height: 5px;
  }
  .bg-dark-800::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.2);
  }
  .group:hover .group-hover\:block {
    display: block;
  }
  .group .group-hover\:block {
    transition-delay: 200ms;
  }
  .group:hover .group-hover\:block {
    animation: fadeIn 0.2s;
  }
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translate(-50%, 5px);
    }
    to {
      opacity: 1;
      transform: translate(-50%, 0);
    }
  }
</style>
<script src="/js/stream-modal.js"></script>
<script>
  function formatMemory(value) {
    return typeof value === 'string' ? value : '0 MB';
  }
</script>
<div id="browseKeysModal" class="fixed inset-0 bg-black/60 z-50 hidden flex items-center justify-center p-4">
  <div id="browseKeysModalContent" class="bg-dark-800 rounded-lg shadow-xl max-w-2xl w-full opacity-0 scale-95 transition-all">
    <div class="px-5 py-3 border-b border-gray-700 flex items-center justify-between">
      <div class="text-white font-semibold">Choose Stream Key by Group</div>
      <button type="button" class="text-gray-400 hover:text-white" onclick="closeBrowseKeysModal()"><i class="ti ti-x"></i></button>
    </div>
    <div class="p-4 max-h-[70vh] overflow-y-auto" id="browseKeysList"></div>
    <div class="px-5 py-3 border-t border-gray-700 text-right">
      <button type="button" class="px-4 py-2 text-gray-300 hover:text-white" onclick="closeBrowseKeysModal()">Close</button>
    </div>
  </div>
</div>
<script>
  // Global variables
  let streamKeys = [];

  function openBrowseKeysModal() {
    renderBrowseKeysModal('create');
    const modal = document.getElementById('browseKeysModal');
    const content = document.getElementById('browseKeysModalContent');
    if (!modal || !content) return;
    modal.classList.remove('hidden');
    setTimeout(() => {
      content.classList.remove('opacity-0', 'scale-95');
      content.classList.add('opacity-100', 'scale-100');
    }, 10);
  }
  function openBrowseKeysModalForEdit() {
    renderBrowseKeysModal('edit');
    const modal = document.getElementById('browseKeysModal');
    const content = document.getElementById('browseKeysModalContent');
    if (!modal || !content) return;
    modal.classList.remove('hidden');
    setTimeout(() => {
      content.classList.remove('opacity-0', 'scale-95');
      content.classList.add('opacity-100', 'scale-100');
    }, 10);
  }
  function closeBrowseKeysModal() {
    const modal = document.getElementById('browseKeysModal');
    const content = document.getElementById('browseKeysModalContent');
    if (!modal || !content) return;
    content.classList.remove('opacity-100', 'scale-100');
    content.classList.add('opacity-0', 'scale-95');
    setTimeout(() => {
      modal.classList.add('hidden');
    }, 200);
  }
  function renderBrowseKeysModal(mode) {
    const selectedGroup = mode === 'edit' ? (document.getElementById('editSavedStreamKeyGroup')?.value || '') : (document.getElementById('savedStreamKeyGroup')?.value || '');
    const wrap = document.getElementById('browseKeysList');
    if (!wrap) return;
    const keys = streamKeys.filter(k => (k.group_name || 'Ungrouped') === selectedGroup);
    if (keys.length === 0) {
      wrap.innerHTML = '<div class="text-center text-gray-400 py-8">No keys in this group.</div>';
      return;
    }
    wrap.innerHTML = keys.map(k => {
      const available = !k.is_used_in_streams;
      const badge = available ? '<span class="text-xs px-2 py-0.5 rounded bg-green-400/10 text-green-400">Available</span>' : '<span class="text-xs px-2 py-0.5 rounded bg-yellow-400/10 text-yellow-400">In Use</span>';
      const rtmp = k.rtmp_url || '';
      return `
        <button type="button" class="w-full text-left rounded px-3 py-2 flex items-center justify-between ${available ? 'bg-dark-800 hover:bg-dark-700' : 'bg-dark-900 opacity-60 cursor-not-allowed'} transition-colors"
                  data-stream-key="${k.stream_key}" data-rtmp="${rtmp}" data-available="${available}" ${available ? `onclick="selectKeyFromBrowse(this, '${mode}')"` : 'disabled'}>
            <div class="flex items-center gap-3">
              <i class="ti ti-key text-gray-300"></i>
              <div>
                <div class="text-white text-sm font-medium">${k.name}</div>
                <div class="text-gray-400 text-xs truncate">${rtmp || '—'}</div>
              </div>
            </div>
            ${badge}
          </button>`;
    }).join('');
  }
  function selectKeyFromBrowse(btn, mode) {
    const key = btn.getAttribute('data-stream-key');
    const rtmp = btn.getAttribute('data-rtmp');
    if (mode === 'edit') {
      document.getElementById('editSavedStreamKeyChosen').value = key;
      const editRtmp = document.getElementById('editRtmpUrl');
      if (rtmp && editRtmp) editRtmp.value = rtmp;
    } else {
      document.getElementById('savedStreamKeyChosen').value = key;
      const newRtmp = document.getElementById('rtmpUrl');
      if (rtmp && newRtmp) newRtmp.value = rtmp;
      // Show selected stream key
      updateSelectedStreamKeyDisplay(key);
    }
    closeBrowseKeysModal();
  }

  function updateSelectedStreamKeyDisplay(key) {
    const display = document.getElementById('selectedStreamKeyDisplay');
    const text = document.getElementById('selectedStreamKeyText');
    if (display && text) {
      if (key && key.trim()) {
        text.textContent = key;
        display.classList.remove('hidden');
      } else {
        display.classList.add('hidden');
      }
    }
  }

  function closeNewStreamModal() {
    const modal = document.getElementById('newStreamModal');
    if (modal) {
      modal.classList.add('hidden');
      // Reset form and clear display
      document.getElementById('newStreamForm').reset();
      document.getElementById('selectedVideoId').value = '';
      updateSelectedStreamKeyDisplay('');
      // Reset video selector
      const videoSelector = document.querySelector('[onclick="toggleVideoSelector()"]');
      if (videoSelector) {
        videoSelector.classList.remove('border-red-500');
        videoSelector.classList.add('border-gray-600');
      }
    }
  }

  let showingNetwork = true;
  function toggleNetworkDiskDisplay(device) {
    const currentPreference = localStorage.getItem('networkDiskToggle') || 'network';
    const newPreference = currentPreference === 'network' ? 'disk' : 'network';

    localStorage.setItem('networkDiskToggle', newPreference);
    showingNetwork = newPreference === 'network';

    updateToggleDisplay('both');
  }
  function updateToggleDisplay(device = 'both') {
    const preference = localStorage.getItem('networkDiskToggle') || 'network';
    showingNetwork = preference === 'network';

    const devices = device === 'both' ? ['mobile', 'desktop'] : [device];

    devices.forEach(dev => {
      const networkContent = document.getElementById(`network-content-${dev}`);
      const diskContent = document.getElementById(`disk-content-${dev}`);
      const toggleIcon = document.getElementById(`toggle-icon-${dev}`);

      if (networkContent && diskContent && toggleIcon) {
        if (showingNetwork) {
          networkContent.style.display = 'block';
          diskContent.style.display = 'none';
          toggleIcon.className = dev === 'mobile' ? 'ti ti-wifi text-white text-sm' : 'ti ti-wifi text-xl text-white';
        } else {
          networkContent.style.display = 'none';
          diskContent.style.display = 'block';
          toggleIcon.className = dev === 'mobile' ? 'ti ti-database text-white text-sm' : 'ti ti-database text-xl text-white';
        }
      }
    });

    const titleElement = document.getElementById('network-disk-title');
    const titleMobileElement = document.getElementById('network-disk-title-mobile');
    const newTitle = showingNetwork ? 'Internet Speed' : 'Disk Usage';

    if (titleElement) {
      titleElement.textContent = newTitle;
    }
    if (titleMobileElement) {
      titleMobileElement.textContent = newTitle;
    }
  }

  function updateSystemStats() {
    console.log('🔄 Fetching system stats...');
    fetch('/api/system-stats')
      .then(response => {
        console.log('📊 System stats response:', response.status);
        return response.json();
      })
      .then(data => {
        console.log('📊 System stats data:', data);
        const cpuUsageEl = document.getElementById('cpu-usage');
        const cpuBarEl = document.getElementById('cpu-bar');
        const memoryUsageEl = document.getElementById('memory-usage');
        const memoryTotalEl = document.getElementById('memory-total');
        const memoryBarEl = document.getElementById('memory-bar');

        console.log('🔍 CPU elements found:', !!cpuUsageEl, !!cpuBarEl);
        console.log('🔍 Memory elements found:', !!memoryUsageEl, !!memoryTotalEl, !!memoryBarEl);

        if (cpuUsageEl) cpuUsageEl.textContent = data.cpu.usage;
        if (cpuBarEl) cpuBarEl.style.width = data.cpu.usage + '%';
        if (memoryUsageEl) memoryUsageEl.textContent = formatMemory(data.memory.used);
        if (memoryTotalEl) memoryTotalEl.textContent = ' / ' + formatMemory(data.memory.total);
        if (memoryBarEl) memoryBarEl.style.width = data.memory.usagePercent + '%';

        document.getElementById('cpu-usage-mobile').textContent = data.cpu.usage;
        document.getElementById('cpu-bar-mobile').style.width = data.cpu.usage + '%';
        document.getElementById('memory-usage-mobile').textContent = formatMemory(data.memory.used);
        document.getElementById('memory-total-mobile').textContent = ' / ' + formatMemory(data.memory.total);
        document.getElementById('memory-bar-mobile').style.width = data.memory.usagePercent + '%';

        if (data.network) {
          document.getElementById('upload-speed').textContent = data.network.uploadFormatted;
          document.getElementById('download-speed').textContent = data.network.downloadFormatted;
          document.getElementById('upload-speed-mobile').textContent = data.network.uploadFormatted;
          document.getElementById('download-speed-mobile').textContent = data.network.downloadFormatted;
        }
        if (data.disk) {
          const diskUsagePercent = data.disk.usagePercent;

          document.getElementById('disk-used').textContent = data.disk.used;
          document.getElementById('disk-total').textContent = ' / ' + data.disk.total;
          document.getElementById('disk-used-mobile').textContent = data.disk.used;
          document.getElementById('disk-total-mobile').textContent = ' / ' + data.disk.total;

          const diskBar = document.getElementById('disk-bar');
          const diskBarMobile = document.getElementById('disk-bar-mobile');
          let barColor;
          if (diskUsagePercent >= 80) {
            barColor = 'bg-red-400';
          } else if (diskUsagePercent >= 50) {
            barColor = 'bg-yellow-400';
          }
           else {
            barColor = 'bg-green-400';
          }

          const colorClasses = ['bg-primary', 'bg-green-400', 'bg-red-400', 'bg-yellow-400']; // Added yellow
          colorClasses.forEach(cls => {
            diskBar.classList.remove(cls);
            diskBarMobile.classList.remove(cls);
          });

          diskBar.classList.add(barColor);
          diskBarMobile.classList.add(barColor);
          diskBar.style.width = diskUsagePercent + '%';
          diskBarMobile.style.width = diskUsagePercent + '%';
        }
      })
      .catch(error => console.error('Error fetching system stats:', error));
  }

  document.addEventListener('DOMContentLoaded', function() {
    updateToggleDisplay('both');
    loadStreamKeys();
    setupStreamKeyHandlers();
    
    // Start server time updates
    updateServerTime();
    setInterval(updateServerTime, 1000);
    
    // Default RTMP URL to YouTube for new streams
    const rtmpInput = document.getElementById('rtmpUrl');
    if (rtmpInput && !rtmpInput.value) {
      rtmpInput.value = 'rtmp://a.rtmp.youtube.com/live2';
    }
    const editRtmpInput = document.getElementById('editRtmpUrl');
    if (editRtmpInput && !editRtmpInput.value) {
      editRtmpInput.value = 'rtmp://a.rtmp.youtube.com/live2';
    }
    
    // Default schedule time: server time + 3 minutes
    fetch('/api/server-time').then(r => r.json()).then(({ localISO }) => {
      if (localISO) {
        // localISO is server local time; add 3 minutes and use as-is
        const base = new Date(localISO.replace('T', ' ') + ':00');
        base.setMinutes(base.getMinutes() + 3);
        const y = base.getFullYear();
        const m = String(base.getMonth() + 1).padStart(2, '0');
        const d = String(base.getDate()).padStart(2, '0');
        const hh = String(base.getHours()).padStart(2, '0');
        const mm = String(base.getMinutes()).padStart(2, '0');
        const iso = `${y}-${m}-${d}T${hh}:${mm}`;
        const sched = document.querySelector('input[type="datetime-local"]');
        if (sched && !sched.value) sched.value = iso;
        const editSched = document.getElementById('editScheduleTime');
        if (editSched && !editSched.value) editSched.value = iso;
      }
    }).catch(() => { });

    // Initialize system stats
    console.log('🚀 Initializing system stats...');
    updateSystemStats();
    setInterval(updateSystemStats, 5000);
    console.log('✅ System stats initialized');

    // Load initial streams
    fetch('/api/streams')
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          displayStreams(data.streams);
          updateStreamCounters(data.streams);
        } else {
          console.error('Error fetching streams:', data.error);
          showEmptyState();
        }
      })
      .catch(error => {
        console.error('Error fetching streams:', error);
        showEmptyState();
      });

    // Event listener for new stream form submission
    document.getElementById('newStreamForm').addEventListener('submit', function (e) {
    e.preventDefault();
    const videoId = document.getElementById('selectedVideoId').value;
    if (!videoId) {
      alert('Please select a video before creating the stream');
      const videoSelector = document.querySelector('[onclick="toggleVideoSelector()"]');
      videoSelector.classList.add('border-red-500');
      videoSelector.classList.remove('border-gray-600');
      videoSelector.animate([
        { transform: 'translateX(0px)' },
        { transform: 'translateX(-5px)' },
        { transform: 'translateX(5px)' },
        { transform: 'translateX(-5px)' },
        { transform: 'translateX(0px)' }
      ], {
        duration: 300,
        iterations: 1
      });
      return;
    }
    // Assuming isStreamKeyValid is globally defined or comes from validation
    // if (!isStreamKeyValid) {
    //   alert('Please use a different stream key. This one is already in use.');
    //   return;
    // }
    const formData = {
      streamTitle: document.getElementById('streamTitle').value,
      videoId: document.getElementById('selectedVideoId').value,
      rtmpUrl: document.getElementById('rtmpUrl').value,
      streamKey: getSelectedStreamKey(),
      bitrate: '2500',
      fps: '30',
      loopVideo: true,
      orientation: 'horizontal',
      resolution: '1280x720',
      useAdvancedSettings: false,
      startNow: document.getElementById('startNowCheckbox').checked
    };
    const scheduleTime = document.querySelector('input[type="datetime-local"]').value;
    const duration = document.querySelector('input[type="number"]').value;
    if (scheduleTime) {
      formData.scheduleTime = scheduleTime;
    }
    if (duration) {
      formData.duration = duration;
    }
    const csrfToken = document.querySelector('input[name="_csrf"]')?.value;
    fetch('/api/streams', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...(csrfToken ? { 'X-CSRF-Token': csrfToken } : {})
      },
      body: JSON.stringify(attachManualKeySave(formData))
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('Stream created successfully!');
          closeNewStreamModal();
          // Refresh stream data without full page reload
          setTimeout(() => {
            console.log('🔄 Starting auto-refresh after stream creation...');
            Promise.all([
              fetch('/api/streams').then(response => response.json()),
              fetch('/api/stream-keys').then(response => response.json())
            ])
              .then(([streamsData, keysData]) => {
                if (streamsData.success) {
                  displayStreams(streamsData.streams);
                  updateStreamCounters(streamsData.streams);
                } else {
                  console.error('Streams data failed:', streamsData.error);
                }
                if (keysData.success) {
                  streamKeys = keysData.streamKeys;
                  updateSavedStreamKeyOptions();
                } else {
                  console.error('Keys data failed:', keysData.error);
                }
              })
              .catch(error => {
                console.error('Error refreshing data:', error);
              });
          }, 500);
        } else {
          alert(`Error: ${data.error || 'Failed to create stream'}`);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while creating the stream');
      });
    });

    // Search input event listener
    const searchInput = document.querySelector('input[placeholder="Search streams..."]');
    if (searchInput) {
      searchInput.addEventListener('input', function () {
        const searchTerm = this.value.toLowerCase().trim();
        const streamRows = document.querySelectorAll('table tbody tr:not(#empty-state)');
        const streamCards = document.querySelectorAll('.block.md\\:hidden.space-y-4 > div');
        streamRows.forEach(row => {
          const streamTitle = row.querySelector('.text-sm.font-medium')?.textContent.toLowerCase() || '';
          const isMatch = streamTitle.includes(searchTerm);
          row.style.display = isMatch ? '' : 'none';
        });
        streamCards.forEach(card => {
          const streamTitle = card.querySelector('.font-medium')?.textContent.toLowerCase() || '';
          const isMatch = streamTitle.includes(searchTerm);
          card.style.display = isMatch ? '' : 'none';
        });
        const visibleRows = [...streamRows].filter(row => row.style.display !== 'none');
        const visibleCards = [...streamCards].filter(card => card.style.display !== 'none');
        const emptyStateRow = document.getElementById('empty-state');
        if (visibleRows.length === 0 && emptyStateRow) {
          emptyStateRow.style.display = 'table-row';
          const emptyStateMessage = emptyStateRow.querySelector('p.text-gray-500');
          if (emptyStateMessage) {
            emptyStateMessage.textContent = searchTerm ? 'No streams match your search' : 'Create your first stream to start broadcasting to your audience';
          }
        } else if (emptyStateRow) {
          emptyStateRow.style.display = 'none';
        }
        const mobileContainer = document.querySelector('.block.md\\:hidden.space-y-4');
        if (mobileContainer && visibleCards.length === 0 && streamCards.length > 0) { // Only update if there are existing cards but none visible
          const searchMessage = searchTerm ? 'No streams match your search' : 'Create your first stream to start broadcasting';
          mobileContainer.innerHTML = `
          <div class="bg-gray-800 rounded-lg p-6 text-center">
            <div class="flex flex-col items-center">
              <div class="w-16 h-16 rounded-full bg-dark-700 flex items-center justify-center mb-4">
                <i class="ti ti-search text-gray-500 text-2xl"></i>
              </div>
              <p class="text-gray-400 font-medium mb-2">${searchMessage}</p>
            </div>
          </div>
        `;
        } else if (mobileContainer && visibleCards.length > 0 && mobileContainer.querySelector('.ti-search')) {
            // If there are visible cards and the search message is currently displayed, clear it
            mobileContainer.innerHTML = '';
            visibleCards.forEach(card => mobileContainer.appendChild(card));
        }
      });
    }
  });

  function updateStreamCounters(streams) {
    console.log('🔢 Updating stream counters with', streams.length, 'streams');
    const liveStreams = streams.filter(stream => stream.status === 'live').length;
    const offlineStreams = streams.filter(stream => stream.status === 'offline').length;
    const scheduledStreams = streams.filter(stream => stream.status === 'scheduled').length;
    console.log('📊 Stream counts - Live:', liveStreams, 'Offline:', offlineStreams, 'Scheduled:', scheduledStreams);


    // Update active streams counter
    const activeDesktop = document.querySelector('.hidden.md\\:grid .bg-gray-800:nth-child(1) p.text-3xl');
    const activeMobile = document.querySelector('.grid.grid-cols-2.md\\:hidden .bg-gray-800:nth-child(1) p.text-xl');
    console.log('🔍 Active desktop element found:', !!activeDesktop);
    console.log('🔍 Active mobile element found:', !!activeMobile);
    if (activeDesktop) activeDesktop.textContent = liveStreams;
    if (activeMobile) activeMobile.textContent = liveStreams;

    // The provided code incorrectly maps subsequent counters. Assuming you want to display:
    // 1st card: Active Streams (liveStreams) - already handled above
    // 2nd card: CPU Usage (not from streams data)
    // 3rd card: Memory (not from streams data)
    // 4th card: Internet Speed / Disk Usage (not from streams data)

    // To display the count of "offline streams" and "scheduled streams" you need more dedicated elements or adjust the existing ones.
    // For now, I'll remove the incorrect mapping to CPU/Memory cards as they are system stats.
    // If you want to show other stream counts, you'll need to define new elements for them.
  }

  // Global streams variable for sorting
  window.streams = [];

  function displayStreams(streamsData) {
    console.log('📺 Displaying streams with data:', streamsData);
    window.streams = streamsData; // Store streams globally for sorting
    if (!window.streams || window.streams.length === 0) {
      console.log('📭 No streams found, showing empty state');
      showEmptyState();
      return;
    }
    console.log('✅ Rendering', window.streams.length, 'streams');
    displayMobileStreams(window.streams);
    displayDesktopStreams(window.streams);
  }
  function displayMobileStreams(streams) {
    const mobileContainer = document.querySelector('.block.md\\:hidden.space-y-4');
    mobileContainer.innerHTML = '';
    streams.forEach(stream => {
      const card = createMobileStreamCard(stream);
      mobileContainer.appendChild(card);
    });
  }
  function displayDesktopStreams(streams) {
    const tableBody = document.querySelector('.hidden.md\\:block table tbody');
    Array.from(tableBody.querySelectorAll('tr:not(#empty-state)')).forEach(row => {
      row.remove();
    });
    const emptyState = document.getElementById('empty-state');
    if (emptyState) {
      emptyState.style.display = 'none';
    }
    streams.forEach(stream => {
      const row = createStreamTableRow(stream);
      tableBody.insertBefore(row, emptyState);
    });
  }
  function createMobileStreamCard(stream) {
    const card = document.createElement('div');
    card.className = 'bg-gray-800 rounded-lg overflow-hidden shadow-md';
    card.dataset.streamId = stream.id;
    const thumbnail = stream.video_thumbnail ?
      stream.video_thumbnail :
      'https://via.placeholder.com/320x180?text=No+Preview';
    let durationDisplay = '';
    if (stream.status === 'live' && stream.start_time) {
      const startTime = new Date(stream.start_time);
      const now = new Date();
      const durationMs = now - startTime;
      const hours = Math.floor(durationMs / (1000 * 60 * 60)).toString().padStart(2, '0');
      const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60)).toString().padStart(2, '0');
      const seconds = Math.floor((durationMs % (1000 * 60)) / 1000).toString().padStart(2, '0');
      durationDisplay = `${hours}:${minutes}:${seconds}`;
    }
    const statusBadge = getStatusBadgeHTML(stream.status);
    const startDate = stream.start_time ? formatDate(new Date(stream.start_time)) : '';
    const scheduleDate = stream.schedule_time ? formatDate(new Date(stream.schedule_time)) : '';
    const scheduleTime = stream.schedule_time ? formatTime(new Date(stream.schedule_time)) : '';
    // Video file info only
    let settingsDisplay = '';
    if (stream.video_title) {
      settingsDisplay = `<span class="text-xs text-gray-500">${stream.video_title}</span>`;
    }
    let formattedDuration = '—';
    if (stream.duration) {
      if (stream.duration >= 60) {
        const hours = Math.floor(stream.duration / 60);
        const minutes = stream.duration % 60;
        formattedDuration = `${hours}h${minutes > 0 ? ` ${minutes}m` : ''}`;
      } else {
        formattedDuration = `${stream.duration} min`;
      }
    }
    card.innerHTML = `
      <div class="relative">
        <div class="bg-dark-700 aspect-video relative">
          <img src="${thumbnail}" class="w-full h-full object-cover" alt="${stream.title}">
          <div class="absolute top-2 right-2">
            ${statusBadge}
          </div>
          ${stream.status === 'live' ? `
          <div class="absolute bottom-2 right-2 bg-black/70 rounded px-1.5 py-0.5 min-w-[4rem] text-center">
            <span class="text-xs font-medium text-white tabular-nums">
              <span class="live-duration" data-start-time="${stream.start_time}">${durationDisplay}</span>
            </span>
          </div>` : ''}
        </div>
      </div>
      <div class="p-4">
        <div class="flex items-center justify-between mb-2">
          <div class="text-base font-semibold text-blue-300">${stream.title}</div>
          <div class="flex items-center text-sm">
            <i class="ti ti-brand-${getPlatformIcon(stream.platform)} text-${getPlatformColor(stream.platform)} mr-1"></i>
            <span>${stream.platform || 'Custom'}</span>
          </div>
        </div>
        <div class="text-xs text-gray-400 mb-2">
          ${settingsDisplay}
        </div>
        ${stream.stream_key ? `
        <div class="text-sm font-mono text-purple-300 mb-2">
          Key: ${stream.stream_key}
        </div>` : ''}
        ${stream.video_folder_path ? `
        <div class="flex items-center text-xs text-yellow-300 mb-2">
          <i class="ti ti-folder mr-1"></i>
          <span>Folder: ${stream.video_folder_path}</span>
        </div>` : ''}
        <div class="flex items-center justify-between text-sm text-gray-400 mb-2">
          <div class="flex items-center">
            <i class="ti ti-clock mr-1.5"></i>
            <span>Duration: ${formattedDuration}</span>
          </div>
          <div class="flex items-center ${stream.channel_name ? '' : 'hidden'}">
            <i class="ti ti-user-circle mr-1.5"></i>
            <span class="text-green-300">${stream.channel_name || ''}</span>
          </div>
        </div>
        ${stream.status === 'scheduled' ? `
        <div class="flex items-center text-sm text-yellow-500 mb-3">
          <i class="ti ti-calendar-event mr-1.5"></i>
          <span>Starts ${scheduleDate} • ${scheduleTime}</span>
        </div>` : `
        <div class="flex items-center text-sm text-gray-400 mb-3">
          <i class="ti ti-calendar mr-1.5"></i>
          <span>${startDate || 'Not started'}</span>
        </div>`}
        <div class="flex justify-between items-center">
          ${getActionButtonHTML(stream.status, stream.id, 'mobile')}
          <div class="flex items-center gap-3 text-gray-400">
            <button class="hover:text-white transition-colors" onclick="editStream('${stream.id}')">
              <i class="ti ti-edit"></i>
            </button>
            <button class="hover:text-red-400 transition-colors" onclick="deleteStream('${stream.id}')">
              <i class="ti ti-trash"></i>
            </button>
          </div>
        </div>
      </div>
    `;
    return card;
  }
  function createStreamTableRow(stream) {
    const row = document.createElement('tr');
    row.className = 'hover:bg-dark-700/50 transition-colors';
    row.dataset.streamId = stream.id;
    const thumbnail = stream.video_thumbnail ?
      stream.video_thumbnail :
      'https://via.placeholder.com/320x180?text=No+Preview';
    const startDate = stream.start_time ? new Date(stream.start_time) : null;
    const scheduleDate = stream.schedule_time ? new Date(stream.schedule_time) : null;
    // Video file info only
    let settingsDisplay = '';
    if (stream.video_title) {
      settingsDisplay = `<span class="text-xs text-gray-500">${stream.video_title}</span>`;
    }

    let durationDisplay = '';
    let statusBadge = '';
    if (stream.status === 'live' && stream.start_time) {
      const startTime = new Date(stream.start_time);
      const now = new Date();
      const durationMs = now - startTime;
      const hours = Math.floor(durationMs / (1000 * 60 * 60)).toString().padStart(2, '0');
      const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60)).toString().padStart(2, '0');
      const seconds = Math.floor((durationMs % (1000 * 60)) / 1000).toString().padStart(2, '0');
      durationDisplay = `${hours}:${minutes}:${seconds}`;
      statusBadge = `
          <span class="flex items-center bg-red-400/10 text-red-400 rounded-full px-2.5 py-1">
            <span class="w-1.5 h-1.5 rounded-full bg-red-400 animate-pulse mr-1.5"></span>
            <span class="text-xs font-medium">Live • <span class="live-duration tabular-nums" data-start-time="${stream.start_time}">
              ${durationDisplay}</span></span>
          </span>
          `;
    } else {
      statusBadge = getStatusBadgeHTML(stream.status);
    }

    // Apply color based on time difference for offline streams
    if (stream.status === 'offline') {
      const statusColor = getStreamStatusColor(stream);
      statusBadge = statusBadge.replace('text-gray-400', statusColor); // Only replace the specific color
    }
    let formattedDuration = '—';
    if (stream.duration) {
      if (stream.duration >= 60) {
        const hours = Math.floor(stream.duration / 60);
        const minutes = stream.duration % 60;
        formattedDuration = `${hours}h${minutes > 0 ? ` ${minutes}m` : ''}`;
      } else {
        formattedDuration = `${stream.duration} min`;
      }
    }
    row.innerHTML = `
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center">
          <div class="w-20 h-12 bg-dark-700 rounded flex-shrink-0 overflow-hidden mr-3">
            <img src="${thumbnail}" class="w-full h-full object-cover" alt="${stream.title}">
          </div>
          <div>
            <div class="text-base font-semibold text-blue-300">${stream.title}</div>
            <div class="text-xs text-gray-400">${settingsDisplay}</div>
            ${stream.stream_key ? `<div class="text-sm font-mono text-purple-300 mt-1">Key: ${stream.stream_key}</div>` : ''}
          </div>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center text-sm text-green-300">
          <i class="ti ti-user-circle mr-1.5"></i>
          <span>${stream.channel_name || '—'}</span>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center text-sm text-yellow-300">
          <i class="ti ti-folder mr-1.5"></i>
          <span>${stream.video_folder_path || 'Default'}</span>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center">
          <i class="ti ti-clock text-gray-400 mr-1.5"></i>
          <span class="text-sm">${formattedDuration}</span>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        ${scheduleDate
        ? `<div class="text-sm text-yellow-500 font-medium">${formatDate(scheduleDate)}</div>
               <div class="text-xs text-gray-400">${formatTime(scheduleDate)}</div>`
        : `<div class="text-sm">--</div>`}
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        ${getExpStopDateDisplay(stream)}
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        ${getRealStopDateDisplay(stream)}
      </td>
      <td class="px-6 py-4 whitespace-nowrap min-w-[150px]">
        <div class="flex items-center">
          ${statusBadge}
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-right">
        <div class="flex items-center justify-end space-x-2">
          ${getActionButtonHTML(stream.status, stream.id, 'desktop')}
          <div class="ml-2 flex items-center gap-1">
            <button class="p-1.5 hover:bg-dark-700 rounded transition-colors" onclick="editStream('${stream.id}')">
              <i class="ti ti-edit text-gray-400 hover:text-white"></i>
            </button>
            <button class="p-1.5 hover:bg-dark-700 rounded transition-colors" onclick="deleteStream('${stream.id}')">
              <i class="ti ti-trash text-gray-400 hover:text-red-400"></i>
            </button>
          </div>
        </div>
      </td>
    `;
    return row;
  }
  function showEmptyState() {
    document.querySelectorAll('tbody tr:not(#empty-state)').forEach(el => {
      el.style.display = 'none';
    });
    const emptyState = document.getElementById('empty-state');
    if (emptyState) {
      emptyState.style.display = 'table-row';
    }
    document.querySelectorAll('.block.md\\:hidden.space-y-4 > div').forEach(el => {
      el.style.display = 'none';
    });
    const mobileContainer = document.querySelector('.block.md\\:hidden.space-y-4');
    mobileContainer.innerHTML = `
      <div class="bg-gray-800 rounded-lg p-6 text-center">
        <div class="flex flex-col items-center">
          <div class="w-16 h-16 rounded-full bg-dark-700 flex items-center justify-center mb-4">
            <i class="ti ti-broadcast text-gray-500 text-2xl"></i>
          </div>
          <p class="text-gray-400 font-medium mb-2">No streams found</p>
          <p class="text-gray-500 mb-4">Create your first stream to start broadcasting</p>
        </div>
      </div>
    `;
  }
  function formatDate(date) {
    if (!date) return '';
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
  }
  function formatTime(date) {
    if (!date) return '';

    return date.toLocaleTimeString('en-US', {
      timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    });
  }

  function formatStopDate(stopTime) {
    if (!stopTime) return '';
    const date = new Date(stopTime);
    return formatDate(date);
  }

  function getExpStopDateDisplay(stream) {
    // Use exp_stop_time from database if available
    if (stream.exp_stop_time) {
      const expStopDate = new Date(stream.exp_stop_time);
      return `<div class="text-sm text-blue-400 font-medium">${formatDate(expStopDate)}</div>
                        <div class="text-xs text-gray-400">${formatTime(expStopDate)}</div>`;
    }

    // Fallback: calculate from schedule_time or start_time + duration
    if (stream.duration) {
      let baseTime;
      if (stream.schedule_time) {
        // Scheduled stream: gunakan schedule_time
        baseTime = new Date(stream.schedule_time);
      } else if (stream.start_time) {
        // Manual stream: gunakan start_time
        baseTime = new Date(stream.start_time);
      }

      if (baseTime) {
        const expStopDate = new Date(baseTime.getTime() + (stream.duration * 60 * 1000)); // duration dalam menit
        return `<div class="text-sm text-blue-400 font-medium">${formatDate(expStopDate)}</div>
                        <div class="text-xs text-gray-400">${formatTime(expStopDate)}</div>`;
      }
    }

    // Jika tidak ada data, tampilkan --
    return `<div class="text-sm text-gray-400">--</div>`;
  }

  function getRealStopDateDisplay(stream) {
    // Real Stop Date = waktu stream benar-benar berhenti
    if (stream.stop_time) {
      const stopDate = new Date(stream.stop_time);
      return `<div class="text-sm text-gray-400">${formatDate(stopDate)}</div>
                      <div class="text-xs text-gray-500">${formatTime(stopDate)}</div>`;
    }

    // Jika stream masih live atau belum berhenti
    return `<div class="text-sm text-gray-400">--</div>`;
  }

  function getStreamStatusColor(stream) {
    // Cek apakah ada perbedaan antara expected dan real stop date
    if (stream.schedule_time && stream.duration && stream.stop_time) {
      const scheduleDate = new Date(stream.schedule_time);
      const expStopDate = new Date(scheduleDate.getTime() + (stream.duration * 60 * 1000));
      const realStopDate = new Date(stream.stop_time);

      // Toleransi 15 menit (900000 ms)
      const timeDiff = Math.abs(realStopDate.getTime() - expStopDate.getTime());
      const tolerance = 15 * 60 * 1000; // 15 menit

      if (timeDiff > tolerance) {
        return 'text-red-400'; // Error - perbedaan > 15 menit
      } else {
        return 'text-green-400'; // Normal - perbedaan <= 15 menit
      }
    }

    return 'text-gray-400'; // Default
  }

  // Sorting functionality
  let currentSortField = null;
  let currentSortDirection = 'asc';

  // Make sortStreams globally accessible
  window.sortStreams = function(field) {
    console.log('Sorting by field:', field);
    const tbody = document.querySelector('tbody');
    const rows = Array.from(tbody.querySelectorAll('tr:not(#empty-state)'));

    console.log('Found rows:', rows.length);
    console.log('Streams data:', window.streams.length);

    // Toggle direction if same field
    if (currentSortField === field) {
      currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
    } else {
      currentSortField = field;
      currentSortDirection = 'asc';
    }

    console.log('Sort direction:', currentSortDirection);

    rows.sort((a, b) => {
      const aData = getStreamData(a);
      const bData = getStreamData(b);

      let aValue, bValue;

      switch (field) {
        case 'title':
          aValue = aData.title || '';
          bValue = bData.title || '';
          break;
        case 'channel':
          aValue = aData.channel_name || '';
          bValue = bData.channel_name || '';
          break;
        case 'folder':
          aValue = aData.video_folder_path || 'Default';
          bValue = bData.video_folder_path || 'Default';
          break;
        case 'schedule':
          aValue = aData.schedule_time ? new Date(aData.schedule_time) : new Date(0);
          bValue = bData.schedule_time ? new Date(bData.schedule_time) : new Date(0);
          break;
        case 'duration':
          aValue = parseInt(aData.duration) || 0;
          bValue = parseInt(bData.duration) || 0;
          break;
        case 'exp_stop_date':
          // Expected Stop Date = Schedule + Duration
          if (aData.schedule_time && aData.duration) {
            aValue = new Date(new Date(aData.schedule_time).getTime() + (aData.duration * 60 * 1000));
          } else {
            aValue = new Date(0);
          }

          if (bData.schedule_time && bData.duration) {
            bValue = new Date(new Date(bData.schedule_time).getTime() + (bData.duration * 60 * 1000));
          } else {
            bValue = new Date(0);
          }
          break;
        case 'real_stop_date':
          // Real Stop Date = waktu stream benar-benar berhenti
          aValue = aData.stop_time ? new Date(aData.stop_time) : new Date(0);
          bValue = bData.stop_time ? new Date(bData.stop_time) : new Date(0);
          break;
        default:
          return 0;
      }

      if (aValue < bValue) return currentSortDirection === 'asc' ? -1 : 1;
      if (aValue > bValue) return currentSortDirection === 'asc' ? 1 : -1;
      return 0;
    });

    // Clear tbody and re-append sorted rows
    tbody.innerHTML = '';
    rows.forEach(row => tbody.appendChild(row));

    // Update sort indicators
    updateSortIndicators(field);
  }

  window.getStreamData = function(row) {
    const streamId = row.dataset.streamId;
    return window.streams.find(s => s.id === streamId) || {};
  }

  window.updateSortIndicators = function(activeField) {
    // Reset all indicators
    document.querySelectorAll('th i').forEach(icon => {
      icon.className = 'ti ti-arrow-up-down text-xs ml-1';
    });

    // Set active indicator
    const activeTh = document.querySelector(`th[onclick="sortStreams('${activeField}')"] i`);
    if (activeTh) {
      activeTh.className = `ti ti-arrow-${currentSortDirection === 'asc' ? 'up' : 'down'} text-xs ml-1`;
    }
  }
  function getPlatformIcon(platform) {
    switch (platform) {
      case 'YouTube': return 'brand-youtube';
      case 'Facebook': return 'brand-facebook';
      case 'Twitch': return 'brand-twitch';
      case 'TikTok': return 'brand-tiktok';
      case 'Instagram': return 'brand-instagram';
      case 'Shopee Live': return 'shopping-bag';
      case 'Restream.io': return 'live-photo';
      default: return 'broadcast';
    }
  }
  function getPlatformColor(platform) {
    switch (platform) {
      case 'YouTube': return 'red-500';
      case 'Facebook': return 'blue-500';
      case 'Twitch': return 'purple-500';
      case 'TikTok': return 'gray-100';
      case 'Instagram': return 'pink-500';
      case 'Shopee Live': return 'orange-500';
      case 'Restream.io': return 'teal-500';
      default: return 'gray-400';
    }
  }
  function getStatusBadgeHTML(status, duration = '') {
    switch (status) {
      case 'live':
        return `
          <span class="flex items-center bg-red-400/10 text-red-400 rounded-full px-2.5 py-1">
            <span class="w-1.5 h-1.5 rounded-full bg-red-400 animate-pulse mr-1.5"></span>
            <span class="text-xs font-medium">Live${duration ? ' • ' + duration : ''}</span>
          </span>
          `;
      case 'scheduled':
        return `
          <span class="flex items-center bg-yellow-500/10 text-yellow-500 rounded-full px-2.5 py-1">
            <i class="ti ti-calendar-event text-xs mr-1.5"></i>
            <span class="text-xs font-medium">Scheduled</span>
          </span>
          `;
      case 'offline':
      default:
        return `
          <span class="flex items-center bg-gray-700 text-gray-400 rounded-full px-2.5 py-1">
            <i class="ti ti-circle-dot text-xs mr-1.5"></i>
            <span class="text-xs font-medium">Offline</span>
          </span>
          `;
    }
  }
  function getActionButtonHTML(status, streamId, view = 'desktop') {
    const btnClass = view === 'mobile'
      ? 'px-4 py-1.5 text-white text-xs font-medium rounded transition-colors'
      : 'inline-flex items-center px-2.5 py-1.5 text-white text-xs font-medium rounded transition-colors';
    switch (status) {
      case 'live':
        return `
          <button
            onclick="stopStream('${streamId}')"
            class="${btnClass} bg-red-500 hover:bg-red-600">
            Stop
          </button>
          `;
      case 'scheduled':
        return `
          <button
            onclick="cancelSchedule('${streamId}')"
            class="${btnClass} bg-yellow-500 hover:bg-yellow-600">
            Cancel
          </button>
          `;
      case 'offline':
      default:
        return `
          <button
            onclick="startStream('${streamId}')"
            class="${btnClass} bg-primary hover:bg-blue-600">
            Start
          </button>
          `;
    }
  }

  // Delete all offline streams
  document.getElementById('deleteOfflineBtn')?.addEventListener('click', function () {
    if (!confirm('Hapus semua livestream berstatus offline? Tindakan ini tidak bisa dibatalkan.')) return;
    const csrfToken = document.querySelector('input[name="_csrf"]')?.value;
    fetch('/api/streams/offline', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        ...(csrfToken ? { 'X-CSRF-Token': csrfToken } : {})
      }
    })
      .then(r => r.json())
      .then(data => {
        if (data.success) {
          alert(`Berhasil menghapus ${data.deletedCount} stream offline.`);
          window.location.reload();
        } else {
          alert('Gagal menghapus stream offline.');
        }
      })
      .catch(err => {
        console.error('Delete offline error:', err);
        alert('Terjadi kesalahan saat menghapus stream offline.');
      });
  });
  function startStream(streamId) {
    if (!streamId) return;
    const actionBtns = document.querySelectorAll(`[data-stream-id="${streamId}"] .action-btn`);
    const originalBtnStates = [];
    actionBtns.forEach(btn => {
      originalBtnStates.push({
        element: btn,
        html: btn.innerHTML,
        disabled: btn.disabled
      });
      btn.innerHTML = '<i class="ti ti-loader animate-spin"></i> Starting...';
      btn.disabled = true;
    });
    function restoreButtons() {
      originalBtnStates.forEach(state => {
        state.element.innerHTML = state.html;
        state.element.disabled = state.disabled;
      });
    }
    fetch(`/api/streams/${streamId}/status`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status: 'live' })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          const streamMode = data.isAdvancedMode ? "Advanced mode" : "Simple mode";
          alert(`Stream started successfully! (${streamMode})`);
          // Refresh stream data without full page reload
          fetch('/api/streams')
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                displayStreams(data.streams);
                updateStreamCounters(data.streams);
              } else {
                console.error('Streams data failed:', data.error);
              }
            })
            .catch(error => {
              console.error('Error refreshing streams:', error);
            });
        } else {
          alert(`Error: ${data.error || 'Failed to start stream'}`);
          restoreButtons();
        }
      })
      .catch(error => {
        console.error('Error starting stream:', error);
        alert(`An error occurred while starting the stream: ${error.message}`);
        restoreButtons();
      });
  }
  function stopStream(streamId) {
    if (!streamId) return;
    const actionBtns = document.querySelectorAll(`[data-stream-id="${streamId}"] .action-btn`);
    const originalBtnStates = [];
    actionBtns.forEach(btn => {
      originalBtnStates.push({
        element: btn,
        html: btn.innerHTML,
        disabled: btn.disabled
      });
      btn.innerHTML = '<i class="ti ti-loader animate-spin"></i> Stopping...';
      btn.disabled = true;
    });
    function restoreButtons() {
      originalBtnStates.forEach(state => {
        state.element.innerHTML = state.html;
        state.element.disabled = state.disabled;
      });
    }
    fetch(`/api/streams/${streamId}/status`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status: 'offline' })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('Stream stopped successfully!');
          window.location.reload();
        } else {
          alert(`Error: ${data.error || 'Failed to stop stream'}`);
          restoreButtons();
        }
      })
      .catch(error => {
        console.error('Error stopping stream:', error);
        alert(`An error occurred while stopping the stream: ${error.message}`);
        restoreButtons();
      });
  }
  function cancelSchedule(streamId) {
    if (!streamId) return;
    const actionBtns = document.querySelectorAll(`[data-stream-id="${streamId}"] .action-btn`);
    const originalBtnStates = [];
    actionBtns.forEach(btn => {
      originalBtnStates.push({
        element: btn,
        html: btn.innerHTML,
        disabled: btn.disabled
      });
      btn.innerHTML = '<i class="ti ti-loader animate-spin"></i> Cancelling...';
      btn.disabled = true;
    });
    function restoreButtons() {
      originalBtnStates.forEach(state => {
        state.element.innerHTML = state.html;
        state.element.disabled = state.disabled;
      });
    }
    fetch(`/api/streams/${streamId}/status`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status: 'offline' })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('Schedule cancelled successfully!');
          window.location.reload();
        } else {
          alert(`Error: ${data.error || 'Failed to cancel schedule'}`);
          restoreButtons();
        }
      })
      .catch(error => {
        console.error('Error cancelling schedule:', error);
        alert(`An error occurred while cancelling the schedule: ${error.message}`);
        restoreButtons();
      });
  }
  function editStream(streamId) {
    console.log('Edit stream:', streamId);
  }
  function deleteStream(streamId) {
    if (!streamId) return;
    if (confirm('Are you sure you want to delete this stream?')) {
      fetch(`/api/streams/${streamId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Refresh stream data without full page reload
            fetch('/api/streams')
              .then(response => response.json())
              .then(streams => {
                displayStreams(streams);
                updateStreamCounters(streams);
              })
              .catch(error => {
                console.error('Error refreshing streams:', error);
                window.location.reload(); // Fallback to full reload
              });
          } else {
            alert('Error: ' + (data.error || 'Failed to delete stream'));
          }
        })
        .catch(error => {
          console.error('Error deleting stream:', error);
          alert('An error occurred while deleting the stream');
        });
    }
  }
  function startCountdowns() {
    const updateTimers = () => {
      document.querySelectorAll('[data-schedule-time]').forEach(el => {
        const scheduleTime = new Date(el.dataset.scheduleTime);
        const now = new Date();
        const diff = scheduleTime - now;
        if (diff <= 0) {
          el.textContent = 'Starting soon...';
          return;
        }
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);
        let timeText = '';
        if (days > 0) timeText = `${days}d ${hours}h ${minutes}m`;
        else if (hours > 0) timeText = `${hours}h ${minutes}m ${seconds}s`;
        else timeText = `${minutes}m ${seconds}s`;
        el.textContent = `Starts in: ${timeText}`;
      });
    };
    updateTimers();
    setInterval(updateTimers, 1000);
  }
  let editSelectedVideoData = null;
  let currentEditOrientation = 'horizontal';
  let editDesktopVideoPlayer = null;
  let editMobileVideoPlayer = null;
  let isEditStreamKeyValid = true;
  let originalStreamKey = '';
  function editStream(streamId) {
    if (!streamId) return;
    fetch(`/api/streams/${streamId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          openEditStreamModal(data.stream);
        } else {
          alert('Error: ' + (data.error || 'Failed to fetch stream data'));
        }
      })
      .catch(error => {
        console.error('Error fetching stream data:', error);
        alert('An error occurred while fetching stream data');
      });
  }
  function openEditStreamModal(stream) {
    originalStreamKey = stream.stream_key;
    document.getElementById('editStreamId').value = stream.id;
    document.getElementById('editStreamTitle').value = stream.title;
    document.getElementById('editRtmpUrl').value = stream.rtmp_url || '';
    document.getElementById('editStreamKey').value = stream.stream_key || '';

    // Update saved stream key options for edit modal
    updateEditSavedStreamKeyOptions();

    // Check if current stream key exists in saved keys
    const savedKey = streamKeys.find(key => key.stream_key === stream.stream_key);
    if (savedKey) {
      document.getElementById('editStreamKeySource').value = 'saved';
      document.getElementById('editManualStreamKeySection').classList.add('hidden');
      document.getElementById('editSavedStreamKeySection').classList.remove('hidden');
      document.getElementById('editStreamKey').required = false;
      // editSavedStreamKey is not an input, no need to set required.
      // document.getElementById('editSavedStreamKey').required = true;
      const groupName = savedKey.group_name || 'Ungrouped';
      const groupSelect = document.getElementById('editSavedStreamKeyGroup');
      if (groupSelect) groupSelect.value = groupName;
      const hiddenChosen = document.getElementById('editSavedStreamKeyChosen');
      if (hiddenChosen) hiddenChosen.value = stream.stream_key;
    } else {
      document.getElementById('editStreamKeySource').value = 'manual';
      document.getElementById('editManualStreamKeySection').classList.remove('hidden');
      document.getElementById('editSavedStreamKeySection').classList.add('hidden');
      document.getElementById('editStreamKey').required = true;
      // editSavedStreamKey is not an input
      // document.getElementById('editSavedStreamKey').required = false;
    }
    if (stream.video_id) {
      document.getElementById('editSelectedVideoId').value = stream.video_id;
      document.getElementById('editSelectedVideo').textContent = stream.video_title || 'Selected Video';
      if (stream.video_filepath) {
        const videoData = {
          id: stream.video_id,
          name: stream.video_title,
          url: `/stream/${stream.video_id}`,
          thumbnail: stream.video_thumbnail
        };
        selectEditVideo(videoData);
      }
    }
    document.getElementById('editLoopVideo').checked = stream.loop_video;
    const bitrateSelect = document.getElementById('editBitrate');
    if (bitrateSelect) { // Check if element exists before iterating
      for (let i = 0; i < bitrateSelect.options.length; i++) {
        if (bitrateSelect.options[i].value == stream.bitrate) {
          bitrateSelect.selectedIndex = i;
          break;
        }
      }
    }
    currentEditOrientation = stream.orientation || 'horizontal';
    setEditVideoOrientation(currentEditOrientation);
    const resolutionSelect = document.getElementById('editResolutionSelect');
    if (resolutionSelect && stream.resolution) { // Check if element exists before iterating
      let found = false;
      for (let i = 0; i < resolutionSelect.options.length; i++) {
        const option = resolutionSelect.options[i];
        const resValue = option.getAttribute(`data-${currentEditOrientation}`);
        if (resValue === stream.resolution) {
          resolutionSelect.selectedIndex = i;
          found = true;
          break;
        }
      }
      if (!found) {
        resolutionSelect.value = "720";
      }
      updateEditResolutionDisplay();
    }
    const fpsSelect = document.getElementById('editFps');
    if (fpsSelect) { // Check if element exists before iterating
      for (let i = 0; i < fpsSelect.options.length; i++) {
        if (fpsSelect.options[i].value == stream.fps) {
          fpsSelect.selectedIndex = i;
          break;
        }
      }
    }
    if (stream.schedule_time) {
      const scheduleDate = new Date(stream.schedule_time);
      const formattedDate = scheduleDate.toISOString().slice(0, 16);
      document.getElementById('editScheduleTime').value = formattedDate;
    } else {
      document.getElementById('editScheduleTime').value = '';
    }
    if (stream.duration) {
      document.getElementById('editDuration').value = stream.duration;
    } else {
      document.getElementById('editDuration').value = '';
    }
    const advancedSettingsContent = document.getElementById('editAdvancedSettingsContent');
    const advancedSettingsToggle = document.getElementById('editAdvancedSettingsToggle');
    if (advancedSettingsToggle) {
      const icon = advancedSettingsToggle.querySelector('i');
      if (stream.use_advanced_settings) {
        if (advancedSettingsContent) advancedSettingsContent.classList.remove('hidden');
        if (icon) icon.style.transform = 'rotate(180deg)';
      } else {
        if (advancedSettingsContent) advancedSettingsContent.classList.add('hidden');
        if (icon) icon.style.transform = '';
      }
    }
    const modal = document.getElementById('editStreamModal');
    if (modal) { // Check if modal exists
      document.body.style.overflow = 'hidden';
      modal.classList.remove('hidden');
      requestAnimationFrame(() => {
        modal.classList.add('active');
      });
    }
  }
  function closeEditStreamModal() {
    const modal = document.getElementById('editStreamModal');
    if (modal) { // Check if modal exists
      document.body.style.overflow = 'auto';
      resetEditModalForm();
      modal.classList.remove('active');
      setTimeout(() => {
        modal.classList.add('hidden');
      }, 200);
    }
    if (editDesktopVideoPlayer) {
      editDesktopVideoPlayer.pause();
      editDesktopVideoPlayer.dispose();
      editDesktopVideoPlayer = null;
    }
    if (editMobileVideoPlayer) {
      editMobileVideoPlayer.pause();
      editMobileVideoPlayer.dispose();
      editMobileVideoPlayer = null;
    }
  }
  function resetEditModalForm() {
    document.getElementById('editStreamForm').reset();
    document.getElementById('editStreamId').value = '';
    document.getElementById('editSelectedVideoId').value = '';
    document.getElementById('editSelectedVideo').textContent = 'Choose a video...';
    const desktopPreview = document.getElementById('editVideoPreview');
    const desktopEmptyPreview = document.getElementById('editEmptyPreview');
    const mobilePreview = document.getElementById('editVideoPreviewMobile');
    const mobileEmptyPreview = document.getElementById('editEmptyPreviewMobile');
    if (desktopPreview) desktopPreview.classList.add('hidden');
    if (mobilePreview) mobilePreview.classList.add('hidden');
    if (desktopEmptyPreview) desktopEmptyPreview.classList.remove('hidden');
    if (mobileEmptyPreview) mobileEmptyPreview.classList.remove('hidden');
    const advancedSettingsContent = document.getElementById('editAdvancedSettingsContent');
    const advancedSettingsToggle = document.getElementById('editAdvancedSettingsToggle');
    if (advancedSettingsContent && advancedSettingsToggle) {
      advancedSettingsContent.classList.add('hidden');
      const icon = advancedSettingsToggle.querySelector('i');
      if (icon) icon.style.transform = '';
    }
  }
  function toggleEditVideoSelector() {
    const dropdown = document.getElementById('editVideoSelectorDropdown');
    if (dropdown) { // Check if dropdown exists
      if (dropdown.classList.contains('hidden')) {
        dropdown.classList.remove('hidden');
        if (!dropdown.dataset.loaded) {
          loadEditGalleryVideos();
          dropdown.dataset.loaded = 'true';
        }
      } else {
        dropdown.classList.add('hidden');
      }
    }
  }
  async function loadEditGalleryVideos() {
    const container = document.getElementById('editVideoListContainer');
    if (!container) {
      console.error("Edit video list container not found");
      return;
    }
    container.innerHTML = '<div class="text-center py-3"><i class="ti ti-loader animate-spin mr-2"></i>Loading videos...</div>';
    try {
      const response = await fetch('/api/stream/videos');
      const videos = await response.json();
      window.allStreamVideos = videos; // Ensure global storage for search/filter
      displayEditFilteredVideos(videos);
      const searchInput = document.getElementById('editVideoSearchInput');
      if (searchInput) {
        searchInput.removeEventListener('input', handleEditVideoSearch);
        searchInput.addEventListener('input', handleEditVideoSearch);
        setTimeout(() => searchInput.focus(), 10);
      }
    } catch (error) {
      console.error('Error loading gallery videos:', error);
      container.innerHTML = '<div class="text-center py-5 text-red-400"><i class="ti ti-alert-circle text-2xl mb-2"></i><p>Failed to load videos</p></div>';
    }
  }
  function handleEditVideoSearch(e) {
    const searchTerm = e.target.value.toLowerCase();
    const filteredVideos = window.allStreamVideos.filter(video =>
      video.name.toLowerCase().includes(searchTerm)
    );
    displayEditFilteredVideos(filteredVideos);
  }
  function displayEditFilteredVideos(videos) {
    const container = document.getElementById('editVideoListContainer');
    if (!container) return; // Add null check for container
    if (!videos || !videos.length) {
      container.innerHTML = '<div class="text-center py-5 text-gray-400"><p>No videos found</p></div>';
      return;
    }
    container.innerHTML = '';
    videos.forEach(video => {
      const button = document.createElement('button');
      button.type = 'button';
      button.className = 'w-full flex items-center space-x-3 p-2 rounded hover:bg-dark-600 transition-colors';
      button.onclick = () => selectEditVideo(video);
      button.innerHTML = `
      <div class="w-16 h-12 bg-dark-800 rounded flex-shrink-0 overflow-hidden">
        <img src="${video.thumbnail || '/images/default-thumbnail.jpg'}" alt=""
          class="w-full h-full object-cover rounded"
          onerror="this.src='/images/default-thumbnail.jpg'">
      </div>
      <div class="flex-1 min-w-0 ml-3">
        <p class="text-sm font-medium text-white truncate">${video.name}</p>
        <div class="flex items-center text-xs text-gray-400">
          <span>${video.resolution || 'Unknown'} • ${video.duration || '00:00'}</span>
          ${video.folder_path ? `<span class="ml-1">• <i class="ti ti-folder mr-1"></i>${video.folder_path}</span>` : ''}
        </div>
      </div>
    `;
      container.appendChild(button);
    });
  }
  function selectEditVideo(video) {
    editSelectedVideoData = video;
    document.getElementById('editSelectedVideo').textContent = video.name;
    document.getElementById('editSelectedVideoId').value = video.id;
    const desktopPreview = document.getElementById('editVideoPreview');
    const desktopEmptyPreview = document.getElementById('editEmptyPreview');
    const mobilePreview = document.getElementById('editVideoPreviewMobile');
    const mobileEmptyPreview = document.getElementById('editEmptyPreviewMobile');
    if (desktopPreview) desktopPreview.classList.remove('hidden');
    if (mobilePreview) mobilePreview.classList.remove('hidden');
    if (desktopEmptyPreview) desktopEmptyPreview.classList.add('hidden');
    if (mobileEmptyPreview) mobileEmptyPreview.classList.add('hidden');
    createEditVideoPreview(video);
    const videoSelectorDropdown = document.getElementById('editVideoSelectorDropdown');
    if (videoSelectorDropdown) videoSelectorDropdown.classList.add('hidden');
  }
  function createEditVideoPreview(video) {
    if (editDesktopVideoPlayer) {
      editDesktopVideoPlayer.pause();
      editDesktopVideoPlayer.dispose();
      editDesktopVideoPlayer = null;
    }
    if (editMobileVideoPlayer) {
      editMobileVideoPlayer.pause();
      editMobileVideoPlayer.dispose();
      editMobileVideoPlayer = null;
    }
    const desktopVideoContainer = document.getElementById('editVideoPreview');
    const mobileVideoContainer = document.getElementById('editVideoPreviewMobile');
    if (desktopVideoContainer) { // Check if container exists
      desktopVideoContainer.innerHTML = `
    <video id="edit-videojs-preview-desktop" class="video-js vjs-default-skin vjs-big-play-centered" controls preload="auto">
      <source src="${video.url}" type="video/mp4">
    </video>
  `;
    }
    if (mobileVideoContainer) { // Check if container exists
      mobileVideoContainer.innerHTML = `
    <video id="edit-videojs-preview-mobile" class="video-js vjs-default-skin vjs-big-play-centered" controls preload="auto">
      <source src="${video.url}" type="video/mp4">
    </video>
  `;
    }
    setTimeout(() => {
      try {
        editDesktopVideoPlayer = videojs('edit-videojs-preview-desktop', {
          controls: true,
          autoplay: false,
          preload: 'auto',
          fluid: true
        });
        editMobileVideoPlayer = videojs('edit-videojs-preview-mobile', {
          controls: true,
          autoplay: false,
          preload: 'auto',
          fluid: true
        });
      } catch (e) {
        console.warn('Error initializing video players:', e);
      }
    }, 10);
  }
  function setEditVideoOrientation(orientation) {
    currentEditOrientation = orientation;
    const horizontalBtn = document.querySelector('[onclick="setEditVideoOrientation(\'horizontal\')"]');
    const verticalBtn = document.querySelector('[onclick="setEditVideoOrientation(\'vertical\')"]');
    if (horizontalBtn) { // Check if button exists
      horizontalBtn.classList.remove('edit-active-orientation', 'bg-primary');
      horizontalBtn.classList.add('bg-dark-700');
    }
    if (verticalBtn) { // Check if button exists
      verticalBtn.classList.remove('edit-active-orientation', 'bg-primary');
      verticalBtn.classList.add('bg-dark-700');
    }
    if (orientation === 'horizontal') {
      if (horizontalBtn) {
        horizontalBtn.classList.add('edit-active-orientation', 'bg-primary');
        horizontalBtn.classList.remove('bg-dark-700');
      }
    } else {
      if (verticalBtn) {
        verticalBtn.classList.add('edit-active-orientation', 'bg-primary');
        verticalBtn.classList.remove('bg-dark-700');
      }
    }
    updateEditResolutionDisplay();
  }
  function updateEditResolutionDisplay() {
    const select = document.getElementById('editResolutionSelect');
    if (select) { // Check if select exists
      const selected = select.options[select.selectedIndex];
      const resValue = selected.getAttribute(`data-${currentEditOrientation}`);
      const editCurrentResolution = document.getElementById('editCurrentResolution');
      if (editCurrentResolution && resValue) {
        editCurrentResolution.textContent = resValue;
      }
    }
  }
  function toggleEditStreamKeyVisibility() {
    const keyInput = document.getElementById('editStreamKey');
    const eyeIcon = document.getElementById('editStreamKeyToggle');
    if (keyInput && eyeIcon) { // Check if elements exist
      if (keyInput.type === 'password') {
        keyInput.type = 'text';
        eyeIcon.classList.remove('ti-eye');
        eyeIcon.classList.add('ti-eye-off');
      } else {
        keyInput.type = 'password';
        eyeIcon.classList.remove('ti-eye-off');
        eyeIcon.classList.add('ti-eye');
      }
    }
  }
  const editForm = document.getElementById('editStreamForm');
  if (editForm) {
    editForm.addEventListener('submit', function (e) {
      e.preventDefault();
      const streamId = document.getElementById('editStreamId').value;
      if (!streamId) {
        alert('Stream ID is missing.');
        return;
      }
      const videoId = document.getElementById('editSelectedVideoId').value;
      if (!videoId) {
        alert('Please select a video before updating the stream.');
        return;
      }
      const formData = {
        streamTitle: document.getElementById('editStreamTitle').value,
        videoId: videoId,
        rtmpUrl: document.getElementById('editRtmpUrl').value,
        streamKey: getSelectedEditStreamKey(),
        bitrate: document.getElementById('editBitrate').value,
        fps: document.getElementById('editFps').value,
        loopVideo: document.getElementById('editLoopVideo').checked,
        orientation: currentEditOrientation,
        resolution: document.getElementById('editCurrentResolution').textContent,
        useAdvancedSettings: !document.getElementById('editAdvancedSettingsContent').classList.contains('hidden')
      };
      const scheduleTime = document.getElementById('editScheduleTime').value;
      const duration = document.getElementById('editDuration').value;
      if (scheduleTime) {
        formData.scheduleTime = scheduleTime;
      }
      if (duration) {
        formData.duration = parseInt(duration);
      }
      const csrfToken = document.querySelector('input[name="_csrf"]')?.value;
      fetch(`/api/streams/${streamId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          ...(csrfToken ? { 'X-CSRF-Token': csrfToken } : {})
        },
        body: JSON.stringify(formData)
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Stream updated successfully!');
            closeEditStreamModal();
            setTimeout(() => {
              window.location.reload();
            }, 500);
          } else {
            alert(`Error: ${data.error || 'Failed to update stream'}`);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while updating the stream');
        });
    });
  }
  startLiveTimers();
  startCountdowns();

  // Setup edit platform selector
  const editPlatformSelector = document.getElementById('editPlatformSelector');
  const editPlatformDropdown = document.getElementById('editPlatformDropdown');
  if (editPlatformSelector && editPlatformDropdown) {
    editPlatformSelector.addEventListener('click', function () {
      editPlatformDropdown.classList.toggle('hidden');
    });
    document.addEventListener('click', function (e) {
      if (!editPlatformSelector.contains(e.target) && !editPlatformDropdown.contains(e.target)) {
        editPlatformDropdown.classList.add('hidden');
      }
    });
    const editPlatformOptions = editPlatformDropdown.querySelectorAll('.platform-option');
    editPlatformOptions.forEach(option => {
      option.addEventListener('click', function () {
        document.getElementById('editRtmpUrl').value = this.getAttribute('data-url');
        editPlatformDropdown.classList.add('hidden');
      });
    });
  }


    // Start Now checkbox functionality
    const startNowCheckbox = document.getElementById('startNowCheckbox');
    if (startNowCheckbox) {
      startNowCheckbox.addEventListener('change', function() {
        const scheduleInput = document.querySelector('input[type="datetime-local"]');
        if (this.checked) {
          if (scheduleInput) {
            scheduleInput.disabled = true;
            scheduleInput.classList.add('opacity-50', 'cursor-not-allowed');
            scheduleInput.classList.remove('focus:border-primary', 'focus:ring-primary');
          }
          this.nextElementSibling.querySelector('.absolute').style.transform = 'translateX(16px)';
          this.nextElementSibling.querySelector('.w-10').classList.add('bg-primary');
        } else {
          if (scheduleInput) {
            scheduleInput.disabled = false;
            scheduleInput.classList.remove('opacity-50', 'cursor-not-allowed');
            scheduleInput.classList.add('focus:border-primary', 'focus:ring-primary');
          }
          this.nextElementSibling.querySelector('.absolute').style.transform = 'translateX(0)';
          this.nextElementSibling.querySelector('.w-10').classList.remove('bg-primary');
        }
      });
    }

    // Custom checkbox interactions for "Save this key" checkboxes
    const customCheckboxes = document.querySelectorAll('input[type="checkbox"].sr-only');
    customCheckboxes.forEach(checkbox => {
      const customBox = checkbox.nextElementSibling;
      const checkIcon = customBox.querySelector('.checkbox-check');
      
      function updateCheckboxState() {
        if (checkbox.checked) {
          customBox.classList.add('bg-primary', 'border-primary');
          customBox.classList.remove('bg-dark-700', 'border-gray-600');
          checkIcon.classList.remove('opacity-0');
          checkIcon.classList.add('opacity-100');
        } else {
          customBox.classList.remove('bg-primary', 'border-primary');
          customBox.classList.add('bg-dark-700', 'border-gray-600');
          checkIcon.classList.add('opacity-0');
          checkIcon.classList.remove('opacity-100');
        }
      }
      
      updateCheckboxState(); // Initial state
      checkbox.addEventListener('change', updateCheckboxState);
      customBox.addEventListener('click', (e) => {
        e.preventDefault();
        checkbox.checked = !checkbox.checked;
        updateCheckboxState();
        checkbox.dispatchEvent(new Event('change'));
      });
    });

  // Start live timers
  function startLiveTimers() {
    setInterval(() => {
      document.querySelectorAll('.live-duration').forEach(el => {
        const startTime = new Date(el.dataset.startTime);
        const now = new Date();
        const durationMs = now - startTime;
        const hours = Math.floor(durationMs / (1000 * 60 * 60)).toString().padStart(2, '0');
        const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60)).toString().padStart(2, '0');
        const seconds = Math.floor((durationMs % (1000 * 60)) / 1000).toString().padStart(2, '0');
        el.textContent = `${hours}:${minutes}:${seconds}`;
      });
    }, 1000);
  }

  // Start all timers
  startLiveTimers();

  // Update server time
  function updateServerTime() {
    fetch('/api/server-time')
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.formattedTime) {
          const timeDisplay = `Server time: ${data.formattedTime}`;
          const createModalDisplay = document.getElementById('serverTimeDisplay');
          if (createModalDisplay) {
            createModalDisplay.textContent = timeDisplay;
          }
          const editModalDisplay = document.getElementById('editServerTimeDisplay');
          if (editModalDisplay) {
            editModalDisplay.textContent = timeDisplay;
          }
        }
      })
      .catch(error => {
        console.error('Error fetching server time:', error);
        // Set error message in display
        const createModalDisplay = document.getElementById('serverTimeDisplay');
        if (createModalDisplay) {
          createModalDisplay.textContent = 'Server time: Error loading...';
        }
        const editModalDisplay = document.getElementById('editServerTimeDisplay');
        if (editModalDisplay) {
          editModalDisplay.textContent = 'Server time: Error loading...';
        }
      });
  }

  // Server time updates will be started in DOMContentLoaded

  // Stream Key Management Functions

  async function loadStreamKeys() {
    try {
      const response = await fetch('/api/stream-keys');
      const data = await response.json();

      if (data.success) {
        streamKeys = data.streamKeys;
        updateSavedStreamKeyOptions();
        updateEditSavedStreamKeyOptions(); // Update for edit modal too
      }
    } catch (error) {
      console.error('Error loading stream keys:', error);
    }
  }

  async function updateSavedStreamKeyOptions() {
    const select = document.getElementById('savedStreamKeyGroup');
    if (!select) return;
    await populateGroupSelect(select);
  }

  // These functions will be called inside DOMContentLoaded

  async function populateGroupSelect(selectEl) {
    if (!selectEl) return;
    
    // Clear existing options first
    selectEl.innerHTML = '';
    
    // Add default option
    const defaultOpt = document.createElement('option');
    defaultOpt.value = '';
    defaultOpt.textContent = 'Select a group...';
    selectEl.appendChild(defaultOpt);
    
    try {
      const res = await fetch('/api/stream-key-groups');
      const data = await res.json();
      let names = [];
      if (data && data.success && Array.isArray(data.groups)) {
        names = data.groups.map(g => g.name);
      }
      if (names.length === 0) names = ['Ungrouped'];
      
      // Remove duplicates and sort
      const uniqueNames = [...new Set(names)].sort();
      
      uniqueNames.forEach(name => {
        const opt = document.createElement('option');
        opt.value = name;
        opt.textContent = name;
        selectEl.appendChild(opt);
      });
      
      const createOpt = document.createElement('option');
      createOpt.value = '__create__';
      createOpt.textContent = 'Create new group…';
      selectEl.appendChild(createOpt);
    } catch (e) {
      console.error('Error populating group select:', e);
      ['Ungrouped'].forEach(name => {
        const opt = document.createElement('option');
        opt.value = name;
        opt.textContent = name;
        selectEl.appendChild(opt);
      });
    }
  }

  function updateEditSavedStreamKeyOptions() {
    const select = document.getElementById('editSavedStreamKeyGroup');
    if (!select) return;
    select.innerHTML = '<option value="">Select a group...</option>';
    const groupNames = Array.from(new Set(streamKeys.map(k => k.group_name || 'Ungrouped'))).sort();
    groupNames.forEach(name => {
      const opt = document.createElement('option');
      opt.value = name;
      opt.textContent = name;
      select.appendChild(opt);
    });
    const createOpt = document.createElement('option');
    createOpt.value = '__create__';
    createOpt.textContent = 'Create new group…';
    select.appendChild(createOpt);
  }

  function setupStreamKeyHandlers() {
    // Create stream handlers
    const streamKeySource = document.getElementById('streamKeySource');
    const manualSection = document.getElementById('manualStreamKeySection');
    const savedSection = document.getElementById('savedStreamKeySection');
    const savedStreamKey = document.getElementById('savedStreamKey'); // This is an input, but used incorrectly in the original code. Corrected to not use 'required' on non-input.
    const manageBtn = document.getElementById('manageStreamKeysBtn');

    if (streamKeySource && manualSection && savedSection) { // Ensure elements exist
      streamKeySource.addEventListener('change', function() {
        if (this.value === 'manual') {
          manualSection.classList.remove('hidden');
          savedSection.classList.add('hidden');
          const streamKeyInput = document.getElementById('streamKey');
          if (streamKeyInput) streamKeyInput.required = true;
        } else {
          manualSection.classList.add('hidden');
          savedSection.classList.remove('hidden');
          const streamKeyInput = document.getElementById('streamKey');
          if (streamKeyInput) streamKeyInput.required = false;
        }
      });
    }

    const savedGroupSelect = document.getElementById('savedStreamKeyGroup');
    if (savedGroupSelect) {
      savedGroupSelect.addEventListener('change', function() {
        if (this.value === '__create__') {
          const name = prompt('Enter new group name:');
          if (name && name.trim()) {
            // Add to select immediately
            const opt = document.createElement('option');
            opt.value = name.trim();
            opt.textContent = name.trim();
            this.insertBefore(opt, this.querySelector('option[value="__create__"]'));
            this.value = name.trim();
            // Also update the global streamKeys array with the new group for consistency, though it won't have keys yet
            // This is a client-side update only, the server would still need to store it if this is a new group.
            if (!streamKeys.some(k => k.group_name === name.trim())) {
                streamKeys.push({ group_name: name.trim(), name: 'New Group Placeholder', stream_key: '', rtmp_url: '', is_used_in_streams: false });
            }
          } else {
            this.value = '';
            return;
          }
        }
        if (this.value) openBrowseKeysModal();
      });
    }

    if (manageBtn) {
      manageBtn.addEventListener('click', function() {
        window.open('/stream-keys', '_blank');
      });
    }
    // Manual key saving controls
    const saveManual = document.getElementById('saveManualKeyCheckbox');
    const manualGroupWrap = document.getElementById('manualKeyGroupWrap');
    const manualGroupSelect = document.getElementById('manualKeyGroupSelect');
    if (saveManual && manualGroupWrap) {
      saveManual.addEventListener('change', function() {
        if (this.checked) {
          manualGroupWrap.classList.remove('hidden');
          populateGroupSelect(manualGroupSelect);
        } else {
          manualGroupWrap.classList.add('hidden');
          if (manualGroupSelect) manualGroupSelect.value = '';
        }
      });
    }
    const editSaveManual = document.getElementById('editSaveManualKeyCheckbox');
    const editManualGroupWrap = document.getElementById('editManualKeyGroupWrap');
    const editManualGroupSelect = document.getElementById('editManualKeyGroupSelect');
    if (editSaveManual && editManualGroupWrap) {
      editSaveManual.addEventListener('change', function() {
        if (this.checked) {
          editManualGroupWrap.classList.remove('hidden');
          populateGroupSelect(editManualGroupSelect);
        } else {
          editManualGroupWrap.classList.add('hidden');
          if (editManualGroupSelect) editManualGroupSelect.value = '';
        }
      });
    }
    const browseBtn = document.getElementById('browseKeysBtn');
    if (browseBtn) {
      browseBtn.addEventListener('click', openBrowseKeysModal);
    }
    const editBrowseBtn = document.getElementById('editBrowseKeysBtn');
    if (editBrowseBtn) {
      editBrowseBtn.addEventListener('click', openBrowseKeysModalForEdit);
    }

    // Edit stream handlers
    const editStreamKeySource = document.getElementById('editStreamKeySource');
    const editManualSection = document.getElementById('editManualStreamKeySection');
    const editSavedSection = document.getElementById('editSavedStreamKeySection');
    const editSavedStreamKey = document.getElementById('editSavedStreamKey'); // This is an input, but used incorrectly in the original code.

    if (editStreamKeySource && editManualSection && editSavedSection) { // Ensure elements exist
      editStreamKeySource.addEventListener('change', function() {
        if (this.value === 'manual') {
          editManualSection.classList.remove('hidden');
          editSavedSection.classList.add('hidden');
          const editStreamKeyInput = document.getElementById('editStreamKey');
          if (editStreamKeyInput) editStreamKeyInput.required = true;
        } else {
          editManualSection.classList.add('hidden');
          editSavedSection.classList.remove('hidden');
          const editStreamKeyInput = document.getElementById('editStreamKey');
          if (editStreamKeyInput) editStreamKeyInput.required = false;
        }
      });
    }

    const editGroupSelect = document.getElementById('editSavedStreamKeyGroup');
    if (editGroupSelect) {
      editGroupSelect.addEventListener('change', function() {
        if (this.value === '__create__') {
          const name = prompt('Enter new group name:');
          if (name && name.trim()) {
            const opt = document.createElement('option');
            opt.value = name.trim();
            opt.textContent = name.trim();
            this.insertBefore(opt, this.querySelector('option[value="__create__"]'));
            this.value = name.trim();
            // Also update the global streamKeys array with the new group for consistency
            if (!streamKeys.some(k => k.group_name === name.trim())) {
                streamKeys.push({ group_name: name.trim(), name: 'New Group Placeholder', stream_key: '', rtmp_url: '', is_used_in_streams: false });
            }
          } else {
            this.value = '';
            return;
          }
        }
        if (this.value) openBrowseKeysModalForEdit();
      });
    }

    const editManageBtn = document.getElementById('editManageStreamKeysBtn');
    if (editManageBtn) {
      editManageBtn.addEventListener('click', function() {
        window.open('/stream-keys', '_blank');
      });
    }
  }

  function getSelectedStreamKey() {
    const streamKeySource = document.getElementById('streamKeySource');
    if (streamKeySource && streamKeySource.value === 'saved') {
      return document.getElementById('savedStreamKeyChosen').value || '';
    } else {
      const streamKeyInput = document.getElementById('streamKey');
      return streamKeyInput ? streamKeyInput.value : '';
    }
  }

  function attachManualKeySave(formData) {
    try {
      const src = document.getElementById('streamKeySource');
      if (src && src.value === 'manual') {
        const save = document.getElementById('saveManualKeyCheckbox');
        if (save && save.checked) {
          const groupName = document.getElementById('manualKeyGroupSelect')?.value || '';
          if (groupName) {
            formData.saveManualKey = {
              groupName,
              streamKey: document.getElementById('streamKey').value,
              rtmpUrl: document.getElementById('rtmpUrl').value
            };
          }
        }
      }
    } catch (e) {
      console.error("Error in attachManualKeySave:", e);
    }
    return formData;
  }

  function getSelectedEditStreamKey() {
    const streamKeySource = document.getElementById('editStreamKeySource');
    if (streamKeySource && streamKeySource.value === 'saved') {
      return document.getElementById('editSavedStreamKeyChosen').value || '';
    } else {
      const editStreamKeyInput = document.getElementById('editStreamKey');
      return editStreamKeyInput ? editStreamKeyInput.value : '';
    }
  }

</script>

<script src="/js/stream-monitor.js"></script>

</body>
</html>