<% layout('layout') -%>  <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="mb-8">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold text-white mb-2">Stream Key Management</h1>
                    <p class="text-gray-400">Organize your stream keys into groups for better management</p>
                </div>
                <div class="flex gap-3">
                    <button id="addGroupBtn" class="bg-gray-600 hover:bg-gray-500 text-white px-4 py-2 rounded-lg flex items-center transition-colors">
                        <i class="ti ti-folder-plus mr-2"></i>
                        Add Group
                    </button>
                    <button id="addStreamKeyBtn" class="bg-primary hover:bg-primary/90 text-white px-6 py-3 rounded-lg flex items-center transition-colors">
                        <i class="ti ti-plus mr-2"></i>
                        Add Stream Key
                    </button>
                </div>
            </div>
        </div>

        <!-- Groups and Stream Keys List -->
        <div id="streamKeysContainer">
            <!-- Groups will be loaded here -->
        </div>

        <!-- Reset All Keys Button - Moved to bottom -->
        <div class="mt-8 flex justify-center">
            <button id="resetAllKeysBtn" class="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg font-medium transition-colors flex items-center gap-2">
                <i class="ti ti-refresh"></i>
                Reset All Keys
            </button>
        </div>
    </div>

    <!-- Add/Edit Group Modal -->
    <div id="groupModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-md transform transition-all scale-95 opacity-0" id="groupModalContent">
                <div class="flex justify-between items-center mb-4 p-6 border-b border-gray-700">
                    <h3 class="text-xl font-semibold text-white" id="groupModalTitle">Add Group</h3>
                    <button type="button" class="text-gray-400 hover:text-white transition-colors" onclick="closeGroupModal()">
                        <i class="ti ti-x text-lg"></i>
                    </button>
                </div>
                <form id="groupForm" class="p-6">
                    <input type="hidden" id="groupId" name="id">
                    <div class="mb-4">
                        <label for="groupName" class="block text-sm font-medium text-gray-300 mb-2">Group Name</label>
                        <input type="text" id="groupName" name="name" class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-primary" placeholder="e.g., YouTube Keys" required>
                    </div>
                    <div class="mb-6">
                        <label for="groupDescription" class="block text-sm font-medium text-gray-300 mb-2">Description (Optional)</label>
                        <textarea id="groupDescription" name="description" class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 focus:outline-none focus:ring-1 focus:ring-primary" placeholder="Describe this group..." rows="3"></textarea>
                    </div>
                    <div class="flex justify-end space-x-3">
                        <button type="button" class="px-4 py-2 rounded-lg text-gray-300 hover:bg-gray-700 transition-colors" onclick="closeGroupModal()">Cancel</button>
                        <button type="submit" class="bg-primary hover:bg-primary/90 text-white px-4 py-2 rounded-lg transition-colors">Save Group</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Add/Edit Stream Key Modal -->
    <div id="streamKeyModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div id="streamKeyModalContent" class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full transform transition-all duration-300 scale-95 opacity-0">
                <div class="px-6 py-4 border-b border-gray-700">
                    <div class="flex items-center justify-between">
                        <h3 id="streamKeyModalTitle" class="text-lg font-semibold text-white">Add Stream Key</h3>
                        <button type="button" id="closeStreamKeyModal" class="text-gray-400 hover:text-white transition-colors">
                            <i class="ti ti-x text-xl"></i>
                        </button>
                    </div>
                </div>
                <form id="streamKeyForm" class="p-6">
                    <input type="hidden" id="streamKeyId" name="id">
                    
                    <div class="mb-4">
                        <label for="streamKeyGroup" class="block text-sm font-medium text-gray-300 mb-2">Group *</label>
                        <select id="streamKeyGroup" name="group_id" required
                                class="w-full bg-dark-700 text-white px-3 py-2 rounded-lg border border-gray-600 focus:outline-none focus:ring-1 focus:ring-primary">
                            <option value="">Select a group...</option>
                        </select>
                    </div>
                    
                    <div class="mb-4">
                        <label for="streamKeyName" class="block text-sm font-medium text-gray-300 mb-2">Name (optional)</label>
                        <input type="text" id="streamKeyName" name="name"
                               class="w-full bg-dark-700 text-white px-3 py-2 rounded-lg border border-gray-600 focus:outline-none focus:ring-1 focus:ring-primary"
                               placeholder="e.g., YouTube Main Channel">
                        <p class="mt-1 text-xs text-gray-400">If left empty, the stream key will be used as the name.</p>
                    </div>

                    <div class="mb-4">
                        <label for="streamKeyValue" class="block text-sm font-medium text-gray-300 mb-2">Stream Key *</label>
                        <div class="relative">
                            <input type="text" id="streamKeyValue" name="stream_key" required
                                   class="w-full bg-dark-700 text-white px-3 py-2 pr-10 rounded-lg border border-gray-600 focus:outline-none focus:ring-1 focus:ring-primary"
                                   placeholder="Enter your stream key">
                            <button type="button" id="toggleStreamKeyVisibility" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white">
                                <i class="ti ti-eye"></i>
                            </button>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="streamKeyRtmpUrl" class="block text-sm font-medium text-gray-300 mb-2">RTMP URL</label>
                        <input type="url" id="streamKeyRtmpUrl" name="rtmp_url"
                               class="w-full bg-dark-700 text-white px-3 py-2 rounded-lg border border-gray-600 focus:outline-none focus:ring-1 focus:ring-primary"
                               placeholder="e.g., rtmp://a.rtmp.youtube.com/live2" value="rtmp://a.rtmp.youtube.com/live2">
                    </div>

                    <div class="mb-4">
                        <label for="streamKeyPlatform" class="block text-sm font-medium text-gray-300 mb-2">Platform</label>
                        <select id="streamKeyPlatform" name="platform"
                                class="w-full bg-dark-700 text-white px-3 py-2 rounded-lg border border-gray-600 focus:outline-none focus:ring-1 focus:ring-primary">
                            <option value="">Select Platform</option>
                            <option value="youtube" selected>YouTube</option>
                            <option value="twitch">Twitch</option>
                            <option value="facebook">Facebook</option>
                            <option value="instagram">Instagram</option>
                            <option value="tiktok">TikTok</option>
                            <option value="custom">Custom</option>
                        </select>
                    </div>

                    <div class="flex justify-end space-x-3">
                        <button type="button" id="cancelStreamKeyBtn" class="px-4 py-2 text-gray-400 hover:text-white transition-colors">
                            Cancel
                        </button>
                        <button type="submit" id="saveStreamKeyBtn" class="px-6 py-2 bg-primary hover:bg-primary/90 text-white rounded-lg font-medium transition-colors">
                            Save
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full">
                <div class="px-6 py-4 border-b border-gray-700">
                    <h3 class="text-lg font-semibold text-white">Delete Stream Key</h3>
                </div>
                <div class="p-6">
                    <p class="text-gray-300 mb-6">Are you sure you want to delete this stream key? This action cannot be undone.</p>
                    <div class="flex justify-end space-x-3">
                        <button id="cancelDeleteBtn" class="px-4 py-2 text-gray-400 hover:text-white transition-colors">
                            Cancel
                        </button>
                        <button id="confirmDeleteBtn" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium transition-colors">
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let streamKeys = [];
        let currentGroups = [];
        let currentStreamKeyId = null;

        // Color palette for groups
        const groupColors = [
            'text-blue-400', 'text-green-400', 'text-purple-400', 'text-pink-400', 
            'text-yellow-400', 'text-red-400', 'text-indigo-400', 'text-cyan-400',
            'text-orange-400', 'text-emerald-400', 'text-violet-400', 'text-rose-400'
        ];

        // Load data on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadGroups().then(() => {
                loadStreamKeys();
            });
            setupEventListeners();
        });

        function setupEventListeners() {
            // Reset all keys button
            document.getElementById('resetAllKeysBtn').addEventListener('click', () => resetAllKeys());
            
            // Add group button
            document.getElementById('addGroupBtn').addEventListener('click', () => openGroupModal());
            
            // Add stream key button
            document.getElementById('addStreamKeyBtn').addEventListener('click', () => openStreamKeyModal());
            const addFirstStreamKeyBtn = document.getElementById('addFirstStreamKeyBtn');
            if (addFirstStreamKeyBtn) {
                addFirstStreamKeyBtn.addEventListener('click', () => openStreamKeyModal());
            }
            
            // Modal controls
            document.getElementById('closeStreamKeyModal').addEventListener('click', closeStreamKeyModal);
            document.getElementById('cancelStreamKeyBtn').addEventListener('click', closeStreamKeyModal);
            document.getElementById('cancelDeleteBtn').addEventListener('click', closeDeleteModal);
            
            // Form submission
            document.getElementById('streamKeyForm').addEventListener('submit', handleStreamKeySubmit);
            
            // Toggle stream key visibility
            document.getElementById('toggleStreamKeyVisibility').addEventListener('click', toggleStreamKeyVisibility);
            
            // Platform change handler
            document.getElementById('streamKeyPlatform').addEventListener('change', handlePlatformChange);
            // Set defaults on open
            document.getElementById('streamKeyPlatform').value = 'youtube';
            document.getElementById('streamKeyRtmpUrl').value = 'rtmp://a.rtmp.youtube.com/live2';
            
            // Group form handler
            document.getElementById('groupForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveGroup();
            });
        }

        async function loadGroups() {
            try {
                const response = await fetch('/api/stream-key-groups');
                const data = await response.json();
                if (data.success) {
                    currentGroups = data.groups;
                    updateGroupSelect();
                    // Don't call displayGroups here, it will be called by loadStreamKeys
                } else {
                    showToast('error', data.error || 'Failed to load groups');
                }
            } catch (error) {
                console.error('Error loading groups:', error);
                showToast('error', 'An error occurred while loading groups');
            }
        }

        async function loadStreamKeys() {
            try {
                const response = await fetch('/api/stream-keys');
                const data = await response.json();
                
                if (data.success) {
                    streamKeys = data.streamKeys;
                    displayGroups(); // Refresh display with updated stream keys
                } else {
                    console.error('Error loading stream keys:', data.error);
                    showToast('error', 'Failed to load stream keys');
                }
            } catch (error) {
                console.error('Error loading stream keys:', error);
                showToast('error', 'Failed to load stream keys');
            }
        }

        function updateGroupSelect() {
            const groupSelect = document.getElementById('streamKeyGroup');
            groupSelect.innerHTML = '<option value="">Select a group...</option>';
            
            currentGroups.forEach(group => {
                const option = document.createElement('option');
                option.value = group.id;
                option.textContent = group.name;
                groupSelect.appendChild(option);
            });
        }

        function displayGroups() {
            const container = document.getElementById('streamKeysContainer');
            container.innerHTML = '';

            if (currentGroups.length === 0) {
                container.innerHTML = `
                    <div class="bg-gray-800 rounded-lg p-8 text-center">
                        <div class="w-16 h-16 rounded-full bg-gray-700 flex items-center justify-center mx-auto mb-4">
                            <i class="ti ti-folder text-gray-500 text-2xl"></i>
                        </div>
                        <p class="text-gray-400 font-medium mb-2">No groups found</p>
                        <p class="text-gray-500 max-w-sm mx-auto mb-4">Create your first group to organize your stream keys.</p>
                        <button id="addFirstGroupBtn" class="bg-primary hover:bg-primary/90 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                            Add Group
                        </button>
                    </div>
                `;
                document.getElementById('addFirstGroupBtn').addEventListener('click', () => openGroupModal());
                return;
            }

            currentGroups.forEach(group => {
                const groupKeys = streamKeys.filter(key => key.group_id === group.id);
                const groupElement = createGroupElement(group, groupKeys);
                container.appendChild(groupElement);
            });

            // Stream keys are permanently deleted when removed from groups
            // No ungrouped keys should be displayed
        }

        function createGroupElement(group, keys) {
            // Get color for this group based on its position
            const groupIndex = currentGroups.findIndex(g => g.id === group.id);
            const colorClass = groupColors[groupIndex % groupColors.length];
            
            const groupDiv = document.createElement('div');
            groupDiv.className = 'bg-gray-800 rounded-lg shadow-md mb-4';
            groupDiv.innerHTML = `
                <div class="p-4 border-b border-gray-700">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold ${colorClass}">${group.name}</h3>
                            ${group.description ? `<p class="text-gray-400 text-sm mt-1">${group.description}</p>` : ''}
                        </div>
                        <div class="flex items-center gap-2">
                            <button onclick="openGroupModal('${group.id}')" class="text-gray-400 hover:text-white transition-colors" title="Edit Group">
                                <i class="ti ti-edit"></i>
                            </button>
                            <button onclick="deleteGroup('${group.id}')" class="text-red-400 hover:text-red-300 transition-colors" title="Delete Group">
                                <i class="ti ti-trash"></i>
                            </button>
                            <button onclick="toggleGroup('${group.id}')" class="text-gray-400 hover:text-white transition-colors" title="Toggle Group">
                                <i class="ti ti-chevron-down" id="toggle-${group.id}"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="p-4" id="keys-${group.id}">
                    ${keys.length === 0 ? `
                        <div class="text-center py-8">
                            <div class="w-12 h-12 rounded-full bg-gray-700 flex items-center justify-center mx-auto mb-3">
                                <i class="ti ti-key ${colorClass} text-xl"></i>
                            </div>
                            <p class="text-gray-400 text-sm mb-3">No stream keys in this group</p>
                            <button onclick="openStreamKeyModal('${group.id}')" class="bg-primary hover:bg-primary/90 text-white px-3 py-1.5 rounded-lg text-sm transition-colors">
                                Add Stream Key
                            </button>
                        </div>
                    ` : `
                        <div class="space-y-2">
                            ${keys.map(key => createStreamKeyCard(key, colorClass)).join('')}
                        </div>
                    `}
                </div>
            `;
            return groupDiv;
        }

        function createStreamKeyCard(key, colorClass = 'text-blue-400') {
            const maskedKey = key.stream_key ? 
                key.stream_key.substring(0, 8) + '••••••••' + key.stream_key.substring(key.stream_key.length - 4) : 
                '••••••••••••••••';
            
            return `
                <div class="bg-gray-700 rounded-lg p-3 flex items-center justify-between">
                    <div class="flex items-center gap-3">
                        <div class="w-8 h-8 rounded bg-gray-600 flex items-center justify-center">
                            <i class="ti ti-key ${colorClass} text-sm"></i>
                        </div>
                        <div>
                            <div class="text-white font-medium">${key.name}</div>
                            <div class="text-gray-400 text-sm font-mono">${maskedKey}</div>
                        </div>
                    </div>
                    <div class="flex items-center gap-2">
                        <span class="text-xs px-2 py-1 rounded ${key.is_used_in_streams ? 'bg-yellow-400/10 text-yellow-400' : 'bg-green-400/10 text-green-400'}">
                            ${key.is_used_in_streams ? 'In Use' : 'Available'}
                        </span>
                        <button onclick="copyToClipboard('${key.stream_key}')" class="text-blue-400 hover:text-blue-300 transition-colors" title="Copy Stream Key">
                            <i class="ti ti-copy"></i>
                        </button>
                        <button onclick="resetStreamKey('${key.id}')" class="text-orange-400 hover:text-orange-300 transition-colors" title="Reset Status">
                            <i class="ti ti-refresh"></i>
                        </button>
                        <button onclick="editStreamKey('${key.id}')" class="text-gray-400 hover:text-white transition-colors" title="Edit">
                            <i class="ti ti-edit"></i>
                        </button>
                        <button onclick="deleteStreamKey('${key.id}')" class="text-red-400 hover:text-red-300 transition-colors" title="Delete">
                            <i class="ti ti-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        }


        function displayStreamKeys() {
            // This function is now handled by displayGroups()
        }

        // Group Management Functions
        function openGroupModal(groupId = null) {
            const modal = document.getElementById('groupModal');
            const modalContent = document.getElementById('groupModalContent');
            const form = document.getElementById('groupForm');
            const title = document.getElementById('groupModalTitle');
            
            form.reset();
            modal.classList.remove('hidden');
            
            setTimeout(() => {
                modalContent.classList.remove('opacity-0', 'scale-95');
                modalContent.classList.add('opacity-100', 'scale-100');
            }, 10);
            
            if (groupId) {
                const group = currentGroups.find(g => g.id === groupId);
                if (group) {
                    title.textContent = 'Edit Group';
                    document.getElementById('groupId').value = group.id;
                    document.getElementById('groupName').value = group.name;
                    document.getElementById('groupDescription').value = group.description || '';
                }
            } else {
                title.textContent = 'Add Group';
                document.getElementById('groupId').value = '';
            }
        }

        function closeGroupModal() {
            const modal = document.getElementById('groupModal');
            const modalContent = document.getElementById('groupModalContent');
            
            modalContent.classList.remove('opacity-100', 'scale-100');
            modalContent.classList.add('opacity-0', 'scale-95');
            
            setTimeout(() => {
                modal.classList.add('hidden');
            }, 300);
        }

        async function saveGroup() {
            const form = document.getElementById('groupForm');
            const formData = new FormData(form);
            const groupId = formData.get('id');
            const name = formData.get('name');
            const description = formData.get('description');
            
            const method = groupId ? 'PUT' : 'POST';
            const url = groupId ? `/api/stream-key-groups/${groupId}` : '/api/stream-key-groups';
            
            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name, description }),
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast('success', `Group ${groupId ? 'updated' : 'created'} successfully!`);
                    closeGroupModal();
                    await loadGroups();
                    displayGroups();
                } else {
                    showToast('error', data.error || `Failed to ${groupId ? 'update' : 'create'} group`);
                }
            } catch (error) {
                console.error('Error saving group:', error);
                showToast('error', 'An error occurred while saving the group');
            }
        }

        async function deleteGroup(groupId) {
            if (!confirm('Are you sure you want to delete this group? All stream keys in this group will also be deleted.')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/stream-key-groups/${groupId}`, {
                    method: 'DELETE',
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast('success', 'Group deleted successfully!');
                    loadGroups();
                    loadStreamKeys();
                } else {
                    showToast('error', data.error || 'Failed to delete group');
                }
            } catch (error) {
                console.error('Error deleting group:', error);
                showToast('error', 'An error occurred while deleting the group');
            }
        }

        function toggleGroup(groupId) {
            const keysDiv = document.getElementById(`keys-${groupId}`);
            const toggleIcon = document.getElementById(`toggle-${groupId}`);
            
            if (keysDiv.style.display === 'none') {
                keysDiv.style.display = 'block';
                toggleIcon.classList.remove('ti-chevron-down');
                toggleIcon.classList.add('ti-chevron-up');
            } else {
                keysDiv.style.display = 'none';
                toggleIcon.classList.remove('ti-chevron-up');
                toggleIcon.classList.add('ti-chevron-down');
            }
        }

        function createStreamKeyRow(key) {
            const row = document.createElement('tr');
            row.className = 'hover:bg-dark-700/50 transition-colors';
            row.dataset.keyId = key.id;
            
            const maskedKey = key.stream_key ? 
                key.stream_key.substring(0, 8) + '••••••••' + key.stream_key.substring(key.stream_key.length - 4) : 
                '—';
            
            const platformIcon = getPlatformIcon(key.platform);
            const platformColor = getPlatformColor(key.platform);
            
            const statusBadge = key.is_used_in_streams ? 
                '<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-400/10 text-yellow-400"><i class="ti ti-lock mr-1"></i>In Use</span>' :
                '<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-400/10 text-green-400"><i class="ti ti-check mr-1"></i>Available</span>';
            
            const lastUsed = key.last_used ? 
                new Date(key.last_used).toLocaleDateString() : 
                'Never';
            
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-white">${key.name}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                        <code class="text-sm text-gray-300 font-mono">${maskedKey}</code>
                        <button onclick="copyStreamKey('${key.id}')" class="ml-2 p-1 hover:bg-gray-700 rounded transition-colors" title="Copy stream key">
                            <i class="ti ti-copy text-gray-400 hover:text-white"></i>
                        </button>
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                        <i class="ti ti-brand-${platformIcon} text-${platformColor} mr-1.5"></i>
                        <span class="text-sm">${key.platform || 'Custom'}</span>
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-400 max-w-xs truncate" title="${key.rtmp_url || '—'}">
                        ${key.rtmp_url || '—'}
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    ${statusBadge}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-400">${lastUsed}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right">
                    <div class="flex items-center justify-end space-x-2">
                        <button onclick="editStreamKey('${key.id}')" class="p-1.5 hover:bg-gray-700 rounded transition-colors" title="Edit">
                            <i class="ti ti-edit text-gray-400 hover:text-white"></i>
                        </button>
                        <button onclick="deleteStreamKey('${key.id}')" class="p-1.5 hover:bg-gray-700 rounded transition-colors" title="Delete">
                            <i class="ti ti-trash text-gray-400 hover:text-red-400"></i>
                        </button>
                    </div>
                </td>
            `;
            
            return row;
        }

        function openStreamKeyModal(keyId = null, groupId = null) {
            const modal = document.getElementById('streamKeyModal');
            const modalContent = document.getElementById('streamKeyModalContent');
            const title = document.getElementById('streamKeyModalTitle');
            const form = document.getElementById('streamKeyForm');
            
            if (keyId) {
                const key = streamKeys.find(k => k.id === keyId);
                if (key) {
                    title.textContent = 'Edit Stream Key';
                    document.getElementById('streamKeyId').value = key.id;
                    document.getElementById('streamKeyGroup').value = key.group_id;
                    document.getElementById('streamKeyName').value = key.name;
                    document.getElementById('streamKeyValue').value = key.stream_key;
                    document.getElementById('streamKeyRtmpUrl').value = key.rtmp_url || '';
                    document.getElementById('streamKeyPlatform').value = key.platform || '';
                }
            } else {
                title.textContent = 'Add Stream Key';
                form.reset();
                document.getElementById('streamKeyId').value = '';
                if (groupId) {
                    document.getElementById('streamKeyGroup').value = groupId;
                }
            }
            
            modal.classList.remove('hidden');
            setTimeout(() => {
                modalContent.classList.remove('opacity-0', 'scale-95');
                modalContent.classList.add('opacity-100', 'scale-100');
            }, 10);
        }

        function closeStreamKeyModal() {
            const modal = document.getElementById('streamKeyModal');
            const modalContent = document.getElementById('streamKeyModalContent');
            
            modalContent.classList.remove('opacity-100', 'scale-100');
            modalContent.classList.add('opacity-0', 'scale-95');
            
            setTimeout(() => {
                modal.classList.add('hidden');
            }, 300);
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.add('hidden');
        }

        async function handleStreamKeySubmit(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData.entries());
            
            const keyId = data.id;
            const isEdit = !!keyId;
            
            // Validate group selection for new keys
            if (!isEdit && !data.group_id) {
                showToast('error', 'Please select a group for the stream key');
                return;
            }
            // If name empty, use stream_key as name
            if (!data.name || data.name.trim().length === 0) {
                data.name = data.stream_key;
            }
            
            try {
                const url = isEdit ? `/api/stream-keys/${keyId}` : '/api/stream-keys';
                const method = isEdit ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('success', isEdit ? 'Stream key updated successfully' : 'Stream key created successfully');
                    closeStreamKeyModal();
                    loadStreamKeys();
                } else {
                    showToast('error', result.error || 'Failed to save stream key');
                }
            } catch (error) {
                console.error('Error saving stream key:', error);
                showToast('error', 'Failed to save stream key');
            }
        }

        function editStreamKey(keyId) {
            openStreamKeyModal(keyId);
        }

        function deleteStreamKey(keyId) {
            const key = streamKeys.find(k => k.id === keyId);
            if (key && key.is_used_in_streams) {
                showToast('error', 'Cannot delete stream key that is currently being used in streams');
                return;
            }
            
            currentStreamKeyId = keyId;
            document.getElementById('deleteModal').classList.remove('hidden');
        }

        async function confirmDelete() {
            if (!currentStreamKeyId) return;
            
            try {
                const response = await fetch(`/api/stream-keys/${currentStreamKeyId}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('success', 'Stream key deleted successfully');
                    closeDeleteModal();
                    loadStreamKeys();
                } else {
                    showToast('error', result.error || 'Failed to delete stream key');
                }
            } catch (error) {
                console.error('Error deleting stream key:', error);
                showToast('error', 'Failed to delete stream key');
            }
            
            currentStreamKeyId = null;
        }

        function copyStreamKey(keyId) {
            const key = streamKeys.find(k => k.id === keyId);
            if (key && key.stream_key) {
                navigator.clipboard.writeText(key.stream_key).then(() => {
                    showToast('success', 'Stream key copied to clipboard');
                }).catch(() => {
                    showToast('error', 'Failed to copy stream key');
                });
            }
        }

        function toggleStreamKeyVisibility() {
            const input = document.getElementById('streamKeyValue');
            const button = document.getElementById('toggleStreamKeyVisibility');
            const icon = button.querySelector('i');
            
            if (input.type === 'password') {
                input.type = 'text';
                icon.className = 'ti ti-eye-off';
            } else {
                input.type = 'password';
                icon.className = 'ti ti-eye';
            }
        }

        function handlePlatformChange() {
            const platform = document.getElementById('streamKeyPlatform').value;
            const rtmpUrlInput = document.getElementById('streamKeyRtmpUrl');
            
            const platformUrls = {
                'youtube': 'rtmp://a.rtmp.youtube.com/live2',
                'twitch': 'rtmp://live.twitch.tv/app',
                'facebook': 'rtmp://live-api-s.facebook.com:80/rtmp/',
                'instagram': 'rtmp://live-upload.instagram.com:80/rtmp/',
                'tiktok': 'rtmp://push.tiktok.com/live/'
            };
            
            if (platformUrls[platform]) {
                rtmpUrlInput.value = platformUrls[platform];
            }
        }

        function getPlatformIcon(platform) {
            const icons = {
                'youtube': 'brand-youtube',
                'twitch': 'brand-twitch',
                'facebook': 'brand-facebook',
                'instagram': 'brand-instagram',
                'tiktok': 'brand-tiktok',
                'custom': 'settings'
            };
            return icons[platform] || 'settings';
        }

        function getPlatformColor(platform) {
            const colors = {
                'youtube': 'red-500',
                'twitch': 'purple-500',
                'facebook': 'blue-500',
                'instagram': 'pink-500',
                'tiktok': 'black',
                'custom': 'gray-500'
            };
            return colors[platform] || 'gray-500';
        }

        function showToast(type, message) {
            // Simple toast implementation
            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white font-medium z-50 ${
                type === 'success' ? 'bg-green-600' : 'bg-red-600'
            }`;
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        // Copy to clipboard function
        async function copyToClipboard(text) {
            try {
                await navigator.clipboard.writeText(text);
                showToast('success', 'Stream key copied to clipboard');
            } catch (err) {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                showToast('success', 'Stream key copied to clipboard');
            }
        }

        // Reset functions
        async function resetAllKeys() {
            const confirmationText = prompt('Are you sure you want to reset all stream keys to available status? This will stop any active streams using these keys.\n\nType "RESET ALL" to confirm:');
            
            if (confirmationText === 'RESET ALL') {
                try {
                    const response = await fetch('/api/stream-keys/reset-all', {
                        method: 'POST'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showToast('success', 'All stream keys have been reset to available status');
                        loadStreamKeys();
                    } else {
                        showToast('error', result.error || 'Failed to reset stream keys');
                    }
                } catch (error) {
                    console.error('Error resetting all keys:', error);
                    showToast('error', 'Failed to reset stream keys');
                }
            } else if (confirmationText !== null) {
                showToast('error', 'Confirmation text does not match. Operation cancelled.');   
            }
        }

        async function resetStreamKey(keyId) {
            if (!confirm('Are you sure you want to reset this stream key to available status? This will stop any active stream using this key.')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/stream-keys/${keyId}/reset`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast('success', 'Stream key has been reset to available status');
                    loadStreamKeys();
                } else {
                    showToast('error', result.error || 'Failed to reset stream key');
                }
            } catch (error) {
                console.error('Error resetting stream key:', error);
                showToast('error', 'Failed to reset stream key');
            }
        }

        // Event listeners for delete confirmation
        document.getElementById('confirmDeleteBtn').addEventListener('click', confirmDelete);
    </script>
